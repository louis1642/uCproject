
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000010c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800100  00800100  000010c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9a  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b79  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a48  00000000  00000000  00002e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  0000484c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000073e5  00000000  00000000  00004d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000975  00000000  00000000  0000c165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000cada  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d6c  00000000  00000000  0000cc1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      14:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_5>
      18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      40:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_16>
      44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      48:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_18>
      4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a8 33       	cpi	r26, 0x38	; 56
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
      88:	0c 94 24 08 	jmp	0x1048	; 0x1048 <_exit>

0000008c <__bad_interrupt>:
      8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
 *  Author: Luigi Catello
 */ 

#include "ADC.h"

void ADC_init(void) {
      90:	cf 93       	push	r28
      92:	df 93       	push	r29
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
	// since we will only use ADC0 and ADC1,
	//  we will set all bits [1:0] in Digital Input Disable Register 0 to 1
	DIDR0 = 0x03;
      98:	8e e7       	ldi	r24, 0x7E	; 126
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	23 e0       	ldi	r18, 0x03	; 3
      9e:	fc 01       	movw	r30, r24
      a0:	20 83       	st	Z, r18
	// minimize power consumption setting PORTC[1:0] to 1 -> 0b00000011 = 0x03
	//PORTC |= 0x03;
	// reference voltage to AVcc (REFS[1:0] = 0b01)
	ADMUX |= (1 << REFS0);
      a2:	8c e7       	ldi	r24, 0x7C	; 124
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	2c e7       	ldi	r18, 0x7C	; 124
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	f9 01       	movw	r30, r18
      ac:	20 81       	ld	r18, Z
      ae:	20 64       	ori	r18, 0x40	; 64
      b0:	fc 01       	movw	r30, r24
      b2:	20 83       	st	Z, r18
	// setting the prescaler to get an AD-clock of around 125kHz
	//  16MHz / 125kHz ~= 128
	//  ADPS[2:0] = 0b111
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
      b4:	8a e7       	ldi	r24, 0x7A	; 122
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	2a e7       	ldi	r18, 0x7A	; 122
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	f9 01       	movw	r30, r18
      be:	20 81       	ld	r18, Z
      c0:	27 60       	ori	r18, 0x07	; 7
      c2:	fc 01       	movw	r30, r24
      c4:	20 83       	st	Z, r18
	// result is right-aligned by default
	// resetting power reduction ADC
	PRR &= ~(1 << PRADC);
      c6:	84 e6       	ldi	r24, 0x64	; 100
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	24 e6       	ldi	r18, 0x64	; 100
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	f9 01       	movw	r30, r18
      d0:	20 81       	ld	r18, Z
      d2:	2e 7f       	andi	r18, 0xFE	; 254
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
	// ADC enable
	ADCSRA |= (1 << ADEN);
      d8:	8a e7       	ldi	r24, 0x7A	; 122
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2a e7       	ldi	r18, 0x7A	; 122
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	20 68       	ori	r18, 0x80	; 128
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
}
      ea:	00 00       	nop
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <ADC_read>:


void ADC_read(uint8_t channelNo, uint16_t* output) {
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	00 d0       	rcall	.+0      	; 0xf8 <ADC_read+0x6>
      f8:	1f 92       	push	r1
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	89 83       	std	Y+1, r24	; 0x01
     100:	7b 83       	std	Y+3, r23	; 0x03
     102:	6a 83       	std	Y+2, r22	; 0x02
	// reset the multiplexer
	ADMUX &= ~0x0f;
     104:	8c e7       	ldi	r24, 0x7C	; 124
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	2c e7       	ldi	r18, 0x7C	; 124
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	f9 01       	movw	r30, r18
     10e:	20 81       	ld	r18, Z
     110:	20 7f       	andi	r18, 0xF0	; 240
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
	
	// select the channel (only channels 1 and 2 are initialized)
	if (channelNo >= 2) {
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	82 30       	cpi	r24, 0x02	; 2
     11a:	48 f5       	brcc	.+82     	; 0x16e <ADC_read+0x7c>
		return;
	}
	ADMUX |= channelNo;
     11c:	8c e7       	ldi	r24, 0x7C	; 124
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	2c e7       	ldi	r18, 0x7C	; 124
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	f9 01       	movw	r30, r18
     126:	30 81       	ld	r19, Z
     128:	29 81       	ldd	r18, Y+1	; 0x01
     12a:	23 2b       	or	r18, r19
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
	
	// start conversion
	ADCSRA |= (1 << ADSC);
     130:	8a e7       	ldi	r24, 0x7A	; 122
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2a e7       	ldi	r18, 0x7A	; 122
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 64       	ori	r18, 0x40	; 64
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
	
	// polling: wait for the conversion to end
	while (ADCSRA & (1 << ADSC));
     142:	00 00       	nop
     144:	8a e7       	ldi	r24, 0x7A	; 122
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	80 81       	ld	r24, Z
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	80 74       	andi	r24, 0x40	; 64
     152:	99 27       	eor	r25, r25
     154:	89 2b       	or	r24, r25
     156:	b1 f7       	brne	.-20     	; 0x144 <ADC_read+0x52>
	
	// read the result
	*output = ADC;
     158:	88 e7       	ldi	r24, 0x78	; 120
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	20 81       	ld	r18, Z
     160:	31 81       	ldd	r19, Z+1	; 0x01
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	fc 01       	movw	r30, r24
     168:	31 83       	std	Z+1, r19	; 0x01
     16a:	20 83       	st	Z, r18
     16c:	01 c0       	rjmp	.+2      	; 0x170 <ADC_read+0x7e>
	// reset the multiplexer
	ADMUX &= ~0x0f;
	
	// select the channel (only channels 1 and 2 are initialized)
	if (channelNo >= 2) {
		return;
     16e:	00 00       	nop
	while (ADCSRA & (1 << ADSC));
	
	// read the result
	*output = ADC;
	
}
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <ADC_tmpDisable>:

void ADC_tmpDisable() {
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~(1 << ADEN);
     184:	8a e7       	ldi	r24, 0x7A	; 122
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	2a e7       	ldi	r18, 0x7A	; 122
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	2f 77       	andi	r18, 0x7F	; 127
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18
}
     196:	00 00       	nop
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <ADC_reenable>:

void ADC_reenable() {
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN);
     1a6:	8a e7       	ldi	r24, 0x7A	; 122
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	2a e7       	ldi	r18, 0x7A	; 122
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	f9 01       	movw	r30, r18
     1b0:	20 81       	ld	r18, Z
     1b2:	20 68       	ori	r18, 0x80	; 128
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
     1b8:	00 00       	nop
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <LEDs_init>:

#include "LEDs.h"


// initialize the LEDs pins as digital output
void LEDs_init(void) {
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
	// configure the pins as digital outputs
	DDRD |= LED_ALL;
     1c8:	8a e2       	ldi	r24, 0x2A	; 42
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	2a e2       	ldi	r18, 0x2A	; 42
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	20 81       	ld	r18, Z
     1d4:	28 63       	ori	r18, 0x38	; 56
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
}
     1da:	00 00       	nop
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <LEDs_turnOn>:


// turn on the LED
void LEDs_turnOn(uint8_t led) {
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	89 83       	std	Y+1, r24	; 0x01
	PORTD |= led;
     1ee:	8b e2       	ldi	r24, 0x2B	; 43
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	2b e2       	ldi	r18, 0x2B	; 43
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	f9 01       	movw	r30, r18
     1f8:	30 81       	ld	r19, Z
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	23 2b       	or	r18, r19
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
}
     202:	00 00       	nop
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <LEDs_turnOff>:


// turn off the LED
void LEDs_turnOff(uint8_t led) {
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	1f 92       	push	r1
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	89 83       	std	Y+1, r24	; 0x01
	PORTD &= ~led;
     218:	8b e2       	ldi	r24, 0x2B	; 43
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	2b e2       	ldi	r18, 0x2B	; 43
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	f9 01       	movw	r30, r18
     222:	20 81       	ld	r18, Z
     224:	32 2f       	mov	r19, r18
     226:	29 81       	ldd	r18, Y+1	; 0x01
     228:	20 95       	com	r18
     22a:	23 23       	and	r18, r19
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
}
     230:	00 00       	nop
     232:	0f 90       	pop	r0
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <main>:


void LocalRemoteSwitch_init();


int main(void) {
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
	// initialize components
	TM_init();
     242:	0e 94 fe 03 	call	0x7fc	; 0x7fc <TM_init>
	PWM_init();
     246:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <PWM_init>
	USART_init();
     24a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <USART_init>
	ADC_init();
     24e:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PowerSaving_init();
     252:	0e 94 93 01 	call	0x326	; 0x326 <PowerSaving_init>
	LEDs_init();
     256:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDs_init>
	LocalRemoteSwitch_init();
     25a:	0e 94 82 01 	call	0x304	; 0x304 <LocalRemoteSwitch_init>
	
	// send hello message
	USART_send('S');
     25e:	83 e5       	ldi	r24, 0x53	; 83
     260:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('e');
     264:	85 e6       	ldi	r24, 0x65	; 101
     266:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('t');
     26a:	84 e7       	ldi	r24, 0x74	; 116
     26c:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('u');
     270:	85 e7       	ldi	r24, 0x75	; 117
     272:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('p');
     276:	80 e7       	ldi	r24, 0x70	; 112
     278:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send(' ');
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('c');
     282:	83 e6       	ldi	r24, 0x63	; 99
     284:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('o');
     288:	8f e6       	ldi	r24, 0x6F	; 111
     28a:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('m');
     28e:	8d e6       	ldi	r24, 0x6D	; 109
     290:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('p');
     294:	80 e7       	ldi	r24, 0x70	; 112
     296:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('l');
     29a:	8c e6       	ldi	r24, 0x6C	; 108
     29c:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('e');
     2a0:	85 e6       	ldi	r24, 0x65	; 101
     2a2:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('t');
     2a6:	84 e7       	ldi	r24, 0x74	; 116
     2a8:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('e');
     2ac:	85 e6       	ldi	r24, 0x65	; 101
     2ae:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('d');
     2b2:	84 e6       	ldi	r24, 0x64	; 100
     2b4:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	USART_send('\r');
     2b8:	8d e0       	ldi	r24, 0x0D	; 13
     2ba:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
	
	// add tasks to the TaskMgr
	TM_add_task(Task_ReadOnOffSw, 0, 200);
     2be:	48 ec       	ldi	r20, 0xC8	; 200
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	8c ed       	ldi	r24, 0xDC	; 220
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	0e 94 10 04 	call	0x820	; 0x820 <TM_add_task>
	TM_add_task(Task_ReadTargetTemp, 10, 50);
     2ce:	42 e3       	ldi	r20, 0x32	; 50
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	6a e0       	ldi	r22, 0x0A	; 10
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	80 ef       	ldi	r24, 0xF0	; 240
     2d8:	94 e0       	ldi	r25, 0x04	; 4
     2da:	0e 94 10 04 	call	0x820	; 0x820 <TM_add_task>
	TM_add_task(Task_Heat, 20, 15);
     2de:	4f e0       	ldi	r20, 0x0F	; 15
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	64 e1       	ldi	r22, 0x14	; 20
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	8a e2       	ldi	r24, 0x2A	; 42
     2e8:	95 e0       	ldi	r25, 0x05	; 5
     2ea:	0e 94 10 04 	call	0x820	; 0x820 <TM_add_task>
	TM_add_task(Task_WriteLEDs, 100, 200);
     2ee:	48 ec       	ldi	r20, 0xC8	; 200
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	64 e6       	ldi	r22, 0x64	; 100
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8c e8       	ldi	r24, 0x8C	; 140
     2f8:	95 e0       	ldi	r25, 0x05	; 5
     2fa:	0e 94 10 04 	call	0x820	; 0x820 <TM_add_task>
	
	// main loop: execute the tasks when they are ready
	while (1) {
		TM_dispatcher();
     2fe:	0e 94 6e 04 	call	0x8dc	; 0x8dc <TM_dispatcher>
	}
     302:	fd cf       	rjmp	.-6      	; 0x2fe <main+0xc4>

00000304 <LocalRemoteSwitch_init>:
}


void LocalRemoteSwitch_init() {
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
	// set PC2 to pull-up mode
	PORTC |= (1 << PORTC2);
     30c:	88 e2       	ldi	r24, 0x28	; 40
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	28 e2       	ldi	r18, 0x28	; 40
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	24 60       	ori	r18, 0x04	; 4
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
     31e:	00 00       	nop
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <PowerSaving_init>:
 *  Author: Luigi Catello
 */ 

#include "PowerSaving.h"

void PowerSaving_init() {
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	// Setup interrupts
	// Enable Pin Change Interrupt 18
	PCICR |= (1 << PCIE2);
     32e:	88 e6       	ldi	r24, 0x68	; 104
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	28 e6       	ldi	r18, 0x68	; 104
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	f9 01       	movw	r30, r18
     338:	20 81       	ld	r18, Z
     33a:	24 60       	ori	r18, 0x04	; 4
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
	// Mask PCINT18
	PCMSK2 |= (1 << PCINT18);
     340:	8d e6       	ldi	r24, 0x6D	; 109
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	2d e6       	ldi	r18, 0x6D	; 109
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	24 60       	ori	r18, 0x04	; 4
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
     352:	78 94       	sei
}
     354:	00 00       	nop
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <PowerSaving_sleep>:


void PowerSaving_sleep() {
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
	// turn off LEDs
	LEDs_turnOff(LED_ALL);
     364:	88 e3       	ldi	r24, 0x38	; 56
     366:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>

	// disable ADC
	ADC_tmpDisable();
     36a:	0e 94 be 00 	call	0x17c	; 0x17c <ADC_tmpDisable>
	
	// select Power Down sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     36e:	83 e5       	ldi	r24, 0x53	; 83
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	23 e5       	ldi	r18, 0x53	; 83
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	f9 01       	movw	r30, r18
     378:	20 81       	ld	r18, Z
     37a:	21 7f       	andi	r18, 0xF1	; 241
     37c:	24 60       	ori	r18, 0x04	; 4
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
	// disable interrupt
	cli();
     382:	f8 94       	cli
	// set SE bit
	sleep_enable();
     384:	83 e5       	ldi	r24, 0x53	; 83
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	23 e5       	ldi	r18, 0x53	; 83
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	21 60       	ori	r18, 0x01	; 1
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
	// enable interrupts
	sei();
     396:	78 94       	sei
	// sleep instruction
	sleep_cpu();
     398:	88 95       	sleep
	//
	// --> entry point after interrupt
	// reset SE bit
	sleep_disable();
     39a:	83 e5       	ldi	r24, 0x53	; 83
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	23 e5       	ldi	r18, 0x53	; 83
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	2e 7f       	andi	r18, 0xFE	; 254
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
	
	// turn on LEDs like before
	Task_WriteLEDs();
     3ac:	0e 94 8c 05 	call	0xb18	; 0xb18 <Task_WriteLEDs>
	
	// enable ADC again
	ADC_reenable();
     3b0:	0e 94 cf 00 	call	0x19e	; 0x19e <ADC_reenable>
}
     3b4:	00 00       	nop
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <__vector_5>:

ISR(PCINT2_vect){
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	// interrupt used to wake up the microcontroller
     3d0:	00 00       	nop
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	0f 90       	pop	r0
     3d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <PWM_init>:

#include "PWM.h"


// initialize the PWM on PB1
void PWM_init(void) {
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	//OC1A - PB1 output
	DDRB |= 0x2;
     3ea:	84 e2       	ldi	r24, 0x24	; 36
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	24 e2       	ldi	r18, 0x24	; 36
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	22 60       	ori	r18, 0x02	; 2
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
	
	//Set Compare Output Mode for channel 1
	TCCR1A |= (1 << COM1A1);
     3fc:	80 e8       	ldi	r24, 0x80	; 128
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	20 e8       	ldi	r18, 0x80	; 128
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	20 68       	ori	r18, 0x80	; 128
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18
	
	//Table 15-5 of the datasheet
	TCCR1A |= (1 << WGM11);
     40e:	80 e8       	ldi	r24, 0x80	; 128
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	20 e8       	ldi	r18, 0x80	; 128
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	22 60       	ori	r18, 0x02	; 2
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
     420:	81 e8       	ldi	r24, 0x81	; 129
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	21 e8       	ldi	r18, 0x81	; 129
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	28 61       	ori	r18, 0x18	; 24
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
	
	// Set PWM frequency/top value
	ICR1 = (FRREQ / (PRESCALER * STROBE_FREQ)) - 1;
     432:	86 e8       	ldi	r24, 0x86	; 134
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	2f e3       	ldi	r18, 0x3F	; 63
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	31 83       	std	Z+1, r19	; 0x01
     43e:	20 83       	st	Z, r18
	OCR1A = ICR1 * STARTING_DUTY_CYCLE / 100;
     440:	48 e8       	ldi	r20, 0x88	; 136
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	86 e8       	ldi	r24, 0x86	; 134
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	fc 01       	movw	r30, r24
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	9c 01       	movw	r18, r24
     458:	ab e7       	ldi	r26, 0x7B	; 123
     45a:	b4 e1       	ldi	r27, 0x14	; 20
     45c:	0e 94 15 08 	call	0x102a	; 0x102a <__umulhisi3>
     460:	96 95       	lsr	r25
     462:	87 95       	ror	r24
     464:	fa 01       	movw	r30, r20
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	80 83       	st	Z, r24
	
	PWM_state = 1;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
     470:	00 00       	nop
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <PWM_setDutyCycle>:


// set a new duty cycle for the PWM:
// percent must be in the interval [0;100]
void PWM_setDutyCycle(uint8_t percent) {
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	1f 92       	push	r1
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	89 83       	std	Y+1, r24	; 0x01
	if (percent == 0) {
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	88 23       	and	r24, r24
     488:	19 f4       	brne	.+6      	; 0x490 <PWM_setDutyCycle+0x18>
		PWM_stop();
     48a:	0e 94 a3 02 	call	0x546	; 0x546 <PWM_stop>
		return;
     48e:	31 c0       	rjmp	.+98     	; 0x4f2 <PWM_setDutyCycle+0x7a>
	}
	if (percent > 100) {
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	85 36       	cpi	r24, 0x65	; 101
     494:	10 f0       	brcs	.+4      	; 0x49a <PWM_setDutyCycle+0x22>
		percent = 100;
     496:	84 e6       	ldi	r24, 0x64	; 100
     498:	89 83       	std	Y+1, r24	; 0x01
	}
	if (PWM_state == 0)	{
     49a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     49e:	88 23       	and	r24, r24
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <PWM_setDutyCycle+0x2e>
		PWM_start();
     4a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <PWM_start>
	}

	ICR1 = (FRREQ / (PRESCALER * STROBE_FREQ)) - 1;
     4a6:	86 e8       	ldi	r24, 0x86	; 134
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	2f e3       	ldi	r18, 0x3F	; 63
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	31 83       	std	Z+1, r19	; 0x01
     4b2:	20 83       	st	Z, r18
	OCR1A = ICR1 * percent / 100;
     4b4:	48 e8       	ldi	r20, 0x88	; 136
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	86 e8       	ldi	r24, 0x86	; 134
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	fc 01       	movw	r30, r24
     4be:	60 81       	ld	r22, Z
     4c0:	71 81       	ldd	r23, Z+1	; 0x01
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	28 2f       	mov	r18, r24
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	62 9f       	mul	r22, r18
     4ca:	c0 01       	movw	r24, r0
     4cc:	63 9f       	mul	r22, r19
     4ce:	90 0d       	add	r25, r0
     4d0:	72 9f       	mul	r23, r18
     4d2:	90 0d       	add	r25, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	96 95       	lsr	r25
     4d8:	87 95       	ror	r24
     4da:	96 95       	lsr	r25
     4dc:	87 95       	ror	r24
     4de:	9c 01       	movw	r18, r24
     4e0:	ab e7       	ldi	r26, 0x7B	; 123
     4e2:	b4 e1       	ldi	r27, 0x14	; 20
     4e4:	0e 94 15 08 	call	0x102a	; 0x102a <__umulhisi3>
     4e8:	96 95       	lsr	r25
     4ea:	87 95       	ror	r24
     4ec:	fa 01       	movw	r30, r20
     4ee:	91 83       	std	Z+1, r25	; 0x01
     4f0:	80 83       	st	Z, r24

}
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <PWM_start>:


// start the counter for the PWM
void PWM_start(void) {
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	// PB1 as output
	DDRB |= 0x2;
     502:	84 e2       	ldi	r24, 0x24	; 36
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	24 e2       	ldi	r18, 0x24	; 36
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	22 60       	ori	r18, 0x02	; 2
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	//Set Compare Output Mode for channel 1
	TCCR1A |= (1 << COM1A1);
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	20 e8       	ldi	r18, 0x80	; 128
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	20 68       	ori	r18, 0x80	; 128
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	// timer on
	TCCR1B |= (1 << CS10);
     526:	81 e8       	ldi	r24, 0x81	; 129
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	21 e8       	ldi	r18, 0x81	; 129
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	21 60       	ori	r18, 0x01	; 1
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	
	PWM_state = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
     53e:	00 00       	nop
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <PWM_stop>:


// stop the counter for the PWM
void PWM_stop(void) {
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
	// unset compare output mode (CH1)
	TCCR1A &= ~(1 << COM1A1);
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	20 e8       	ldi	r18, 0x80	; 128
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	2f 77       	andi	r18, 0x7F	; 127
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
	// stop counter
	TCCR1B &= ~(1 << CS10);
     560:	81 e8       	ldi	r24, 0x81	; 129
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	21 e8       	ldi	r18, 0x81	; 129
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	2e 7f       	andi	r18, 0xFE	; 254
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	// write digital 0 on PB1
	PORTB &= ~0x2;
     572:	85 e2       	ldi	r24, 0x25	; 37
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	25 e2       	ldi	r18, 0x25	; 37
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	2d 7f       	andi	r18, 0xFD	; 253
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	
	PWM_state = 0;
     584:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     588:	00 00       	nop
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <TM_init_update>:

/* INTERNAL FUNCTIONS */
#pragma region INTERNAL_FUNC

// initialize timer0 to define the ticks
void TM_init_update(void) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
	// timer 0
	// normal mode, no prescaler
	TCCR0B |= (1<<CS00);
     598:	85 e4       	ldi	r24, 0x45	; 69
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	25 e4       	ldi	r18, 0x45	; 69
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	f9 01       	movw	r30, r18
     5a2:	20 81       	ld	r18, Z
     5a4:	21 60       	ori	r18, 0x01	; 1
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
	// timer overflow interrupt enable
	TIMSK0 |= (1<<TOIE0);
     5aa:	8e e6       	ldi	r24, 0x6E	; 110
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2e e6       	ldi	r18, 0x6E	; 110
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	21 60       	ori	r18, 0x01	; 1
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
	// enable interrupts
	sei();
     5bc:	78 94       	sei
}
     5be:	00 00       	nop
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <TM_init_tasks>:


// initialize the tasks
void TM_init_tasks(void){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <TM_init_tasks+0x6>
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0;i<TASK_MAX;i++) {
     5d0:	1a 82       	std	Y+2, r1	; 0x02
     5d2:	19 82       	std	Y+1, r1	; 0x01
     5d4:	15 c0       	rjmp	.+42     	; 0x600 <TM_init_tasks+0x3a>
		// empty slots
		Task_list[i].task_function = NULLPTR;
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	3a 81       	ldd	r19, Y+2	; 0x02
     5da:	c9 01       	movw	r24, r18
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	82 1b       	sub	r24, r18
     5ea:	93 0b       	sbc	r25, r19
     5ec:	8c 5f       	subi	r24, 0xFC	; 252
     5ee:	9e 4f       	sbci	r25, 0xFE	; 254
     5f0:	fc 01       	movw	r30, r24
     5f2:	11 82       	std	Z+1, r1	; 0x01
     5f4:	10 82       	st	Z, r1


// initialize the tasks
void TM_init_tasks(void){
	int i;
	for(i=0;i<TASK_MAX;i++) {
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	06 97       	sbiw	r24, 0x06	; 6
     606:	3c f3       	brlt	.-50     	; 0x5d6 <TM_init_tasks+0x10>
		// empty slots
		Task_list[i].task_function = NULLPTR;
	}
}
     608:	00 00       	nop
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <TM_update>:


// on each tick, advance on the timetable
void TM_update(void) {
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	00 d0       	rcall	.+0      	; 0x61a <TM_update+0x6>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
	int i;
	// check every task
	for(i=0;i<TASK_MAX;i++) {
     61e:	1a 82       	std	Y+2, r1	; 0x02
     620:	19 82       	std	Y+1, r1	; 0x01
     622:	a3 c0       	rjmp	.+326    	; 0x76a <TM_update+0x156>
		// if not an empty slot
		if(Task_list[i].task_function != NULLPTR) {
     624:	29 81       	ldd	r18, Y+1	; 0x01
     626:	3a 81       	ldd	r19, Y+2	; 0x02
     628:	c9 01       	movw	r24, r18
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	82 1b       	sub	r24, r18
     638:	93 0b       	sbc	r25, r19
     63a:	8c 5f       	subi	r24, 0xFC	; 252
     63c:	9e 4f       	sbci	r25, 0xFE	; 254
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	89 2b       	or	r24, r25
     646:	09 f4       	brne	.+2      	; 0x64a <TM_update+0x36>
     648:	8b c0       	rjmp	.+278    	; 0x760 <TM_update+0x14c>
			// if it is time to run
			if(Task_list[i].delay == 0) {
     64a:	29 81       	ldd	r18, Y+1	; 0x01
     64c:	3a 81       	ldd	r19, Y+2	; 0x02
     64e:	c9 01       	movw	r24, r18
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	82 1b       	sub	r24, r18
     65e:	93 0b       	sbc	r25, r19
     660:	8a 5f       	subi	r24, 0xFA	; 250
     662:	9e 4f       	sbci	r25, 0xFE	; 254
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	89 2b       	or	r24, r25
     66c:	09 f0       	breq	.+2      	; 0x670 <TM_update+0x5c>
     66e:	55 c0       	rjmp	.+170    	; 0x71a <TM_update+0x106>
				// increment the run counter
				Task_list[i].run += 1;
     670:	29 81       	ldd	r18, Y+1	; 0x01
     672:	3a 81       	ldd	r19, Y+2	; 0x02
     674:	c9 01       	movw	r24, r18
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	82 1b       	sub	r24, r18
     684:	93 0b       	sbc	r25, r19
     686:	86 5f       	subi	r24, 0xF6	; 246
     688:	9e 4f       	sbci	r25, 0xFE	; 254
     68a:	fc 01       	movw	r30, r24
     68c:	80 81       	ld	r24, Z
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	48 2f       	mov	r20, r24
     692:	29 81       	ldd	r18, Y+1	; 0x01
     694:	3a 81       	ldd	r19, Y+2	; 0x02
     696:	c9 01       	movw	r24, r18
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	82 1b       	sub	r24, r18
     6a6:	93 0b       	sbc	r25, r19
     6a8:	86 5f       	subi	r24, 0xF6	; 246
     6aa:	9e 4f       	sbci	r25, 0xFE	; 254
     6ac:	fc 01       	movw	r30, r24
     6ae:	40 83       	st	Z, r20
				// if the task is periodic
				if(Task_list[i].interval != 0) {
     6b0:	29 81       	ldd	r18, Y+1	; 0x01
     6b2:	3a 81       	ldd	r19, Y+2	; 0x02
     6b4:	c9 01       	movw	r24, r18
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	82 1b       	sub	r24, r18
     6c4:	93 0b       	sbc	r25, r19
     6c6:	88 5f       	subi	r24, 0xF8	; 248
     6c8:	9e 4f       	sbci	r25, 0xFE	; 254
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	89 2b       	or	r24, r25
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <TM_update+0xc2>
     6d4:	45 c0       	rjmp	.+138    	; 0x760 <TM_update+0x14c>
					Task_list[i].delay = Task_list[i].interval;
     6d6:	29 81       	ldd	r18, Y+1	; 0x01
     6d8:	3a 81       	ldd	r19, Y+2	; 0x02
     6da:	c9 01       	movw	r24, r18
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	82 1b       	sub	r24, r18
     6ea:	93 0b       	sbc	r25, r19
     6ec:	88 5f       	subi	r24, 0xF8	; 248
     6ee:	9e 4f       	sbci	r25, 0xFE	; 254
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	ac 01       	movw	r20, r24
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	c9 01       	movw	r24, r18
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	82 1b       	sub	r24, r18
     70c:	93 0b       	sbc	r25, r19
     70e:	8a 5f       	subi	r24, 0xFA	; 250
     710:	9e 4f       	sbci	r25, 0xFE	; 254
     712:	fc 01       	movw	r30, r24
     714:	51 83       	std	Z+1, r21	; 0x01
     716:	40 83       	st	Z, r20
     718:	23 c0       	rjmp	.+70     	; 0x760 <TM_update+0x14c>
				}
			} else {
				// waiting time is decremented by one tick
				Task_list[i].delay -=1;
     71a:	29 81       	ldd	r18, Y+1	; 0x01
     71c:	3a 81       	ldd	r19, Y+2	; 0x02
     71e:	c9 01       	movw	r24, r18
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	82 1b       	sub	r24, r18
     72e:	93 0b       	sbc	r25, r19
     730:	8a 5f       	subi	r24, 0xFA	; 250
     732:	9e 4f       	sbci	r25, 0xFE	; 254
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	ac 01       	movw	r20, r24
     73c:	41 50       	subi	r20, 0x01	; 1
     73e:	51 09       	sbc	r21, r1
     740:	29 81       	ldd	r18, Y+1	; 0x01
     742:	3a 81       	ldd	r19, Y+2	; 0x02
     744:	c9 01       	movw	r24, r18
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	8a 5f       	subi	r24, 0xFA	; 250
     758:	9e 4f       	sbci	r25, 0xFE	; 254
     75a:	fc 01       	movw	r30, r24
     75c:	51 83       	std	Z+1, r21	; 0x01
     75e:	40 83       	st	Z, r20

// on each tick, advance on the timetable
void TM_update(void) {
	int i;
	// check every task
	for(i=0;i<TASK_MAX;i++) {
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	06 97       	sbiw	r24, 0x06	; 6
     770:	0c f4       	brge	.+2      	; 0x774 <TM_update+0x160>
     772:	58 cf       	rjmp	.-336    	; 0x624 <TM_update+0x10>
				// waiting time is decremented by one tick
				Task_list[i].delay -=1;
			}
		}
	}
}
     774:	00 00       	nop
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <__vector_16>:

// timer overflow interrupt handler
ISR (TIMER0_OVF_vect) {
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
	// the OVF_MAX is used to define the timing for the ticks
	if(overflows++ >= OVF_MAX) {
     7ac:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <overflows>
     7b0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <overflows+0x1>
     7b4:	9c 01       	movw	r18, r24
     7b6:	2f 5f       	subi	r18, 0xFF	; 255
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <overflows+0x1>
     7be:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <overflows>
     7c2:	ce 97       	sbiw	r24, 0x3e	; 62
     7c4:	30 f0       	brcs	.+12     	; 0x7d2 <__vector_16+0x52>
		// this is a tick
		TM_update();
     7c6:	0e 94 0a 03 	call	0x614	; 0x614 <TM_update>
		overflows = 0;
     7ca:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <overflows+0x1>
     7ce:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <overflows>
	}
}
     7d2:	00 00       	nop
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <TM_init>:
/* END INTERNAL FUNCTIONS */
#pragma endregion INTERNAL_FUNC


// initialize task manager
void TM_init(void) {
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	overflows = 0;
     804:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <overflows+0x1>
     808:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <overflows>
	addTaskIndex = 0;
     80c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <addTaskIndex>
	TM_init_tasks();
     810:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TM_init_tasks>
	TM_init_update();
     814:	0e 94 c8 02 	call	0x590	; 0x590 <TM_init_update>
}
     818:	00 00       	nop
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <TM_add_task>:


// add a new task to the queue
void TM_add_task(void (*function)(void), int16_t delay, int16_t interval) {
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <TM_add_task+0x6>
     826:	00 d0       	rcall	.+0      	; 0x828 <TM_add_task+0x8>
     828:	00 d0       	rcall	.+0      	; 0x82a <TM_add_task+0xa>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	7c 83       	std	Y+4, r23	; 0x04
     834:	6b 83       	std	Y+3, r22	; 0x03
     836:	5e 83       	std	Y+6, r21	; 0x06
     838:	4d 83       	std	Y+5, r20	; 0x05
	if (addTaskIndex >= TASK_MAX) {
     83a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
     83e:	86 30       	cpi	r24, 0x06	; 6
     840:	08 f0       	brcs	.+2      	; 0x844 <TM_add_task+0x24>
     842:	42 c0       	rjmp	.+132    	; 0x8c8 <TM_add_task+0xa8>
		return;
	}
	Task_list[addTaskIndex].task_function = function;
     844:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
     848:	28 2f       	mov	r18, r24
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	c9 01       	movw	r24, r18
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	82 1b       	sub	r24, r18
     85c:	93 0b       	sbc	r25, r19
     85e:	8c 5f       	subi	r24, 0xFC	; 252
     860:	9e 4f       	sbci	r25, 0xFE	; 254
     862:	29 81       	ldd	r18, Y+1	; 0x01
     864:	3a 81       	ldd	r19, Y+2	; 0x02
     866:	fc 01       	movw	r30, r24
     868:	31 83       	std	Z+1, r19	; 0x01
     86a:	20 83       	st	Z, r18
	Task_list[addTaskIndex].delay = delay;
     86c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	c9 01       	movw	r24, r18
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	82 1b       	sub	r24, r18
     884:	93 0b       	sbc	r25, r19
     886:	8a 5f       	subi	r24, 0xFA	; 250
     888:	9e 4f       	sbci	r25, 0xFE	; 254
     88a:	2b 81       	ldd	r18, Y+3	; 0x03
     88c:	3c 81       	ldd	r19, Y+4	; 0x04
     88e:	fc 01       	movw	r30, r24
     890:	31 83       	std	Z+1, r19	; 0x01
     892:	20 83       	st	Z, r18
	Task_list[addTaskIndex].interval = interval;
     894:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
     898:	28 2f       	mov	r18, r24
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	4d 81       	ldd	r20, Y+5	; 0x05
     89e:	5e 81       	ldd	r21, Y+6	; 0x06
     8a0:	c9 01       	movw	r24, r18
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	82 1b       	sub	r24, r18
     8b0:	93 0b       	sbc	r25, r19
     8b2:	88 5f       	subi	r24, 0xF8	; 248
     8b4:	9e 4f       	sbci	r25, 0xFE	; 254
     8b6:	fc 01       	movw	r30, r24
     8b8:	51 83       	std	Z+1, r21	; 0x01
     8ba:	40 83       	st	Z, r20
	++addTaskIndex;
     8bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <addTaskIndex>
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <TM_add_task+0xaa>


// add a new task to the queue
void TM_add_task(void (*function)(void), int16_t delay, int16_t interval) {
	if (addTaskIndex >= TASK_MAX) {
		return;
     8c8:	00 00       	nop
	}
	Task_list[addTaskIndex].task_function = function;
	Task_list[addTaskIndex].delay = delay;
	Task_list[addTaskIndex].interval = interval;
	++addTaskIndex;
}
     8ca:	26 96       	adiw	r28, 0x06	; 6
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <TM_dispatcher>:


// execute the pending task
void TM_dispatcher(void) {
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <TM_dispatcher+0x6>
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
	int i;
	// check every task
	for(i=0;i<TASK_MAX;i++) {
     8e6:	1a 82       	std	Y+2, r1	; 0x02
     8e8:	19 82       	std	Y+1, r1	; 0x01
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <__stack+0xa3>
		// if the slot is not empty
		if(Task_list[i].task_function != NULLPTR) {
     8ec:	29 81       	ldd	r18, Y+1	; 0x01
     8ee:	3a 81       	ldd	r19, Y+2	; 0x02
     8f0:	c9 01       	movw	r24, r18
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	82 1b       	sub	r24, r18
     900:	93 0b       	sbc	r25, r19
     902:	8c 5f       	subi	r24, 0xFC	; 252
     904:	9e 4f       	sbci	r25, 0xFE	; 254
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	89 2b       	or	r24, r25
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	43 c0       	rjmp	.+134    	; 0x998 <__stack+0x99>
			// if it is the right time to run
			if(Task_list[i].run > 0) {
     912:	29 81       	ldd	r18, Y+1	; 0x01
     914:	3a 81       	ldd	r19, Y+2	; 0x02
     916:	c9 01       	movw	r24, r18
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	82 1b       	sub	r24, r18
     926:	93 0b       	sbc	r25, r19
     928:	86 5f       	subi	r24, 0xF6	; 246
     92a:	9e 4f       	sbci	r25, 0xFE	; 254
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	18 16       	cp	r1, r24
     932:	94 f5       	brge	.+100    	; 0x998 <__stack+0x99>
				// execute the function
				Task_list[i].task_function();
     934:	29 81       	ldd	r18, Y+1	; 0x01
     936:	3a 81       	ldd	r19, Y+2	; 0x02
     938:	c9 01       	movw	r24, r18
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	82 1b       	sub	r24, r18
     948:	93 0b       	sbc	r25, r19
     94a:	8c 5f       	subi	r24, 0xFC	; 252
     94c:	9e 4f       	sbci	r25, 0xFE	; 254
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	fc 01       	movw	r30, r24
     956:	09 95       	icall
				// decrease run request
				Task_list[i].run -= 1;
     958:	29 81       	ldd	r18, Y+1	; 0x01
     95a:	3a 81       	ldd	r19, Y+2	; 0x02
     95c:	c9 01       	movw	r24, r18
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	82 1b       	sub	r24, r18
     96c:	93 0b       	sbc	r25, r19
     96e:	86 5f       	subi	r24, 0xF6	; 246
     970:	9e 4f       	sbci	r25, 0xFE	; 254
     972:	fc 01       	movw	r30, r24
     974:	80 81       	ld	r24, Z
     976:	81 50       	subi	r24, 0x01	; 1
     978:	48 2f       	mov	r20, r24
     97a:	29 81       	ldd	r18, Y+1	; 0x01
     97c:	3a 81       	ldd	r19, Y+2	; 0x02
     97e:	c9 01       	movw	r24, r18
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	82 1b       	sub	r24, r18
     98e:	93 0b       	sbc	r25, r19
     990:	86 5f       	subi	r24, 0xF6	; 246
     992:	9e 4f       	sbci	r25, 0xFE	; 254
     994:	fc 01       	movw	r30, r24
     996:	40 83       	st	Z, r20

// execute the pending task
void TM_dispatcher(void) {
	int i;
	// check every task
	for(i=0;i<TASK_MAX;i++) {
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	06 97       	sbiw	r24, 0x06	; 6
     9a8:	0c f4       	brge	.+2      	; 0x9ac <__stack+0xad>
     9aa:	a0 cf       	rjmp	.-192    	; 0x8ec <TM_dispatcher+0x10>
				// decrease run request
				Task_list[i].run -= 1;
			}
		}
	}
}
     9ac:	00 00       	nop
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <Task_ReadOnOffSw>:
uint16_t dc;

uint16_t abs(int16_t x);

// read On/Off from PD2
void Task_ReadOnOffSw(void) {
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
	if ((PIND & (1 << PIND2)) == 0) {
     9c0:	89 e2       	ldi	r24, 0x29	; 41
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	80 81       	ld	r24, Z
     9c8:	88 2f       	mov	r24, r24
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	84 70       	andi	r24, 0x04	; 4
     9ce:	99 27       	eor	r25, r25
     9d0:	89 2b       	or	r24, r25
     9d2:	11 f0       	breq	.+4      	; 0x9d8 <Task_ReadOnOffSw+0x20>
		// ON
	} else {
		// OFF
		PowerSaving_sleep();
     9d4:	0e 94 ae 01 	call	0x35c	; 0x35c <PowerSaving_sleep>
	}
}
     9d8:	00 00       	nop
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <Task_ReadTargetTemp>:


// read Local/External from PC2 (pull-up)
// acquire target temperature from either the potentiometer or the terminal
void Task_ReadTargetTemp(void) {
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
	if ((PINC & (1 << PINC2)) == 0) {
     9e8:	86 e2       	ldi	r24, 0x26	; 38
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	80 81       	ld	r24, Z
     9f0:	88 2f       	mov	r24, r24
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	84 70       	andi	r24, 0x04	; 4
     9f6:	99 27       	eor	r25, r25
     9f8:	89 2b       	or	r24, r25
     9fa:	31 f4       	brne	.+12     	; 0xa08 <Task_ReadTargetTemp+0x28>
		// closed switch -> local
		// read target temperature from potentiometer (ADC1)
		ADC_read(1, &targetTemperature);
     9fc:	61 e3       	ldi	r22, 0x31	; 49
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
	} else {
		// open switch -> external
		// read target temperature from terminal
		targetTemperature = (uint16_t) (USART_read() * 10.23);
	}
}
     a06:	22 c0       	rjmp	.+68     	; 0xa4c <Task_ReadTargetTemp+0x6c>
		// read target temperature from potentiometer (ADC1)
		ADC_read(1, &targetTemperature);
	} else {
		// open switch -> external
		// read target temperature from terminal
		targetTemperature = (uint16_t) (USART_read() * 10.23);
     a08:	0e 94 ce 05 	call	0xb9c	; 0xb9c <USART_read>
     a0c:	88 2f       	mov	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	09 2e       	mov	r0, r25
     a12:	00 0c       	add	r0, r0
     a14:	aa 0b       	sbc	r26, r26
     a16:	bb 0b       	sbc	r27, r27
     a18:	bc 01       	movw	r22, r24
     a1a:	cd 01       	movw	r24, r26
     a1c:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	24 e1       	ldi	r18, 0x14	; 20
     a26:	3e ea       	ldi	r19, 0xAE	; 174
     a28:	43 e2       	ldi	r20, 0x23	; 35
     a2a:	51 e4       	ldi	r21, 0x41	; 65
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fixunssfsi>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <targetTemperature+0x1>
     a48:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <targetTemperature>
	}
}
     a4c:	00 00       	nop
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <Task_Heat>:



// read current temperature from ADC0, compare with target temperature,
// then turn on/off PWM to warm up/cool down, and update the status (for the LEDs)
void Task_Heat(void) {
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
	ADC_read(0, &currentTemperature);
     a5c:	65 e3       	ldi	r22, 0x35	; 53
     a5e:	71 e0       	ldi	r23, 0x01	; 1
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
	if (abs(targetTemperature - currentTemperature) < 128) {
     a66:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <targetTemperature>
     a6a:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <targetTemperature+0x1>
     a6e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <currentTemperature>
     a72:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <currentTemperature+0x1>
     a76:	a9 01       	movw	r20, r18
     a78:	48 1b       	sub	r20, r24
     a7a:	59 0b       	sbc	r21, r25
     a7c:	ca 01       	movw	r24, r20
     a7e:	80 38       	cpi	r24, 0x80	; 128
     a80:	91 05       	cpc	r25, r1
     a82:	18 f4       	brcc	.+6      	; 0xa8a <Task_Heat+0x36>
		// OK
		state_heating = 0;
     a84:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <state_heating>
     a88:	12 c0       	rjmp	.+36     	; 0xaae <Task_Heat+0x5a>
	} else if(currentTemperature > targetTemperature) {
     a8a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <currentTemperature>
     a8e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <currentTemperature+0x1>
     a92:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <targetTemperature>
     a96:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <targetTemperature+0x1>
     a9a:	82 17       	cp	r24, r18
     a9c:	93 07       	cpc	r25, r19
     a9e:	20 f4       	brcc	.+8      	; 0xaa8 <Task_Heat+0x54>
		// COOL DOWN
		state_heating = 2;
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state_heating>
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <Task_Heat+0x5a>
	} else {
		// WARM UP
		state_heating = 1;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state_heating>
	}
	
	dc = (uint16_t)((float)targetTemperature * 100.0 / 1024.0);
     aae:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <targetTemperature>
     ab2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <targetTemperature+0x1>
     ab6:	cc 01       	movw	r24, r24
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatunsisf>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	48 ec       	ldi	r20, 0xC8	; 200
     ace:	52 e4       	ldi	r21, 0x42	; 66
     ad0:	bc 01       	movw	r22, r24
     ad2:	cd 01       	movw	r24, r26
     ad4:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e8       	ldi	r20, 0x80	; 128
     ae2:	54 e4       	ldi	r21, 0x44	; 68
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__divsf3>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	bc 01       	movw	r22, r24
     af2:	cd 01       	movw	r24, r26
     af4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fixunssfsi>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <dc+0x1>
     b00:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dc>
	PWM_setDutyCycle(dc);
     b04:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <dc>
     b08:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <dc+0x1>
     b0c:	0e 94 3c 02 	call	0x478	; 0x478 <PWM_setDutyCycle>
	
}
     b10:	00 00       	nop
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <Task_WriteLEDs>:


// write the state (heating up / cooling down / temperature ok) on the LEDs
void Task_WriteLEDs(void) {
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
	switch (state_heating) {
     b20:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <state_heating>
     b24:	88 2f       	mov	r24, r24
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	91 05       	cpc	r25, r1
     b2c:	69 f0       	breq	.+26     	; 0xb48 <Task_WriteLEDs+0x30>
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	91 05       	cpc	r25, r1
     b32:	89 f0       	breq	.+34     	; 0xb56 <Task_WriteLEDs+0x3e>
     b34:	89 2b       	or	r24, r25
     b36:	09 f0       	breq	.+2      	; 0xb3a <Task_WriteLEDs+0x22>
			LEDs_turnOff(LED_ALL & ~LED_BLUE);
			LEDs_turnOn(LED_BLUE);
			break;
		default:
			// should never happen
			return;
     b38:	15 c0       	rjmp	.+42     	; 0xb64 <Task_WriteLEDs+0x4c>
// write the state (heating up / cooling down / temperature ok) on the LEDs
void Task_WriteLEDs(void) {
	switch (state_heating) {
		case 0:
			// temperature ok - green led
			LEDs_turnOff(LED_ALL & ~LED_GREEN);
     b3a:	88 e2       	ldi	r24, 0x28	; 40
     b3c:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>
			LEDs_turnOn(LED_GREEN);
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDs_turnOn>
			break;
     b46:	0e c0       	rjmp	.+28     	; 0xb64 <Task_WriteLEDs+0x4c>
		case 1:
			// heating up - red led
			LEDs_turnOff(LED_ALL & ~LED_RED);
     b48:	80 e3       	ldi	r24, 0x30	; 48
     b4a:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>
			LEDs_turnOn(LED_RED);
     b4e:	88 e0       	ldi	r24, 0x08	; 8
     b50:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDs_turnOn>
			break;
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <Task_WriteLEDs+0x4c>
		case 2:
			// cooling down - blue led
			LEDs_turnOff(LED_ALL & ~LED_BLUE);
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>
			LEDs_turnOn(LED_BLUE);
     b5c:	80 e2       	ldi	r24, 0x20	; 32
     b5e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDs_turnOn>
			break;
     b62:	00 00       	nop
		default:
			// should never happen
			return;
	}
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <USART_init>:

#include "USART.h"

uint8_t data;

void USART_init(void) {
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	// setting baud rate
	UBRR0 = UBRRVALUE;
     b72:	84 ec       	ldi	r24, 0xC4	; 196
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	27 e6       	ldi	r18, 0x67	; 103
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	fc 01       	movw	r30, r24
     b7c:	31 83       	std	Z+1, r19	; 0x01
     b7e:	20 83       	st	Z, r18
	// enabling receiver and RxComplete interrupt
	UCSR0B |= (1 << RXEN0 | 1 << RXCIE0 | 1 << TXEN0);
     b80:	81 ec       	ldi	r24, 0xC1	; 193
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	21 ec       	ldi	r18, 0xC1	; 193
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	f9 01       	movw	r30, r18
     b8a:	20 81       	ld	r18, Z
     b8c:	28 69       	ori	r18, 0x98	; 152
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
	// default values for UCSR0C are already good
	// enable global interrupts
	sei();	// should be already enabled!
     b92:	78 94       	sei
}
     b94:	00 00       	nop
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <USART_read>:

uint8_t USART_read(void) {
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	// only when the program asks for the data from the terminal,
	//  the data is provided (instead of every time the terminal receives
	//  a new message)
	return data;
     ba4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <data>
}
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <USART_send>:

void USART_send(uint8_t ch) {
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	1f 92       	push	r1
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	89 83       	std	Y+1, r24	; 0x01
	// wait for the data register to be ready to receive new data
	while ((UCSR0A & (1 << UDRE0)) == 0);
     bba:	00 00       	nop
     bbc:	80 ec       	ldi	r24, 0xC0	; 192
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	fc 01       	movw	r30, r24
     bc2:	80 81       	ld	r24, Z
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	80 72       	andi	r24, 0x20	; 32
     bca:	99 27       	eor	r25, r25
     bcc:	89 2b       	or	r24, r25
     bce:	b1 f3       	breq	.-20     	; 0xbbc <USART_send+0xe>
	// write the char in the register
	UDR0 = ch;
     bd0:	86 ec       	ldi	r24, 0xC6	; 198
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
}
     bda:	00 00       	nop
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <__vector_18>:


// handle the interrupt
ISR(USART_RX_vect) {
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	// the data sent by the terminal is stored in the variable.
	static uint16_t dataBuffer;
	uint8_t rx = UDR0;
     c12:	86 ec       	ldi	r24, 0xC6	; 198
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	89 83       	std	Y+1, r24	; 0x01
	
	if (rx >= '0' && rx <= '9') {
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	80 33       	cpi	r24, 0x30	; 48
     c20:	d8 f0       	brcs	.+54     	; 0xc58 <__vector_18+0x74>
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	8a 33       	cpi	r24, 0x3A	; 58
     c26:	c0 f4       	brcc	.+48     	; 0xc58 <__vector_18+0x74>
		// digit
		
		// ASCII digit to number conversion can be obtained
		//  subtracting the ASCII code for '0'
		dataBuffer = 10 * dataBuffer + (rx - '0');
     c28:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dataBuffer.1625>
     c2c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dataBuffer.1625+0x1>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	9c 01       	movw	r18, r24
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	28 0f       	add	r18, r24
     c40:	39 1f       	adc	r19, r25
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	c0 97       	sbiw	r24, 0x30	; 48
     c4e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dataBuffer.1625+0x1>
     c52:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dataBuffer.1625>
     c56:	37 c0       	rjmp	.+110    	; 0xcc6 <__vector_18+0xe2>
	} else if (rx == '\r' && dataBuffer <= 100) {
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	8d 30       	cpi	r24, 0x0D	; 13
     c5c:	d9 f4       	brne	.+54     	; 0xc94 <__vector_18+0xb0>
     c5e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dataBuffer.1625>
     c62:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dataBuffer.1625+0x1>
     c66:	85 36       	cpi	r24, 0x65	; 101
     c68:	91 05       	cpc	r25, r1
     c6a:	a0 f4       	brcc	.+40     	; 0xc94 <__vector_18+0xb0>
		// user pressed enter and the inputted number is less than 100%
		
		// move the data from the dataBuffer
		data = dataBuffer;
     c6c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dataBuffer.1625>
     c70:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dataBuffer.1625+0x1>
     c74:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <data>
		// clean the static buffer for future use
		dataBuffer = 0;
     c78:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dataBuffer.1625+0x1>
     c7c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dataBuffer.1625>
		// send confirmation message
		USART_send('o');
     c80:	8f e6       	ldi	r24, 0x6F	; 111
     c82:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('k');
     c86:	8b e6       	ldi	r24, 0x6B	; 107
     c88:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('\r');
     c8c:	8d e0       	ldi	r24, 0x0D	; 13
     c8e:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
     c92:	19 c0       	rjmp	.+50     	; 0xcc6 <__vector_18+0xe2>
	} else {
		// something is off
		
		// send error message
		USART_send(' ');
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('e');
     c9a:	85 e6       	ldi	r24, 0x65	; 101
     c9c:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('r');
     ca0:	82 e7       	ldi	r24, 0x72	; 114
     ca2:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('r');
     ca6:	82 e7       	ldi	r24, 0x72	; 114
     ca8:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('o');
     cac:	8f e6       	ldi	r24, 0x6F	; 111
     cae:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('r');
     cb2:	82 e7       	ldi	r24, 0x72	; 114
     cb4:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		USART_send('\r');
     cb8:	8d e0       	ldi	r24, 0x0D	; 13
     cba:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_send>
		// clean the buffer
		dataBuffer = 0;
     cbe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dataBuffer.1625+0x1>
     cc2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dataBuffer.1625>
	}
     cc6:	00 00       	nop
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <__divsf3>:
     cf2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__divsf3x>
     cf6:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     cfa:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     cfe:	58 f0       	brcs	.+22     	; 0xd16 <__divsf3+0x24>
     d00:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     d04:	40 f0       	brcs	.+16     	; 0xd16 <__divsf3+0x24>
     d06:	29 f4       	brne	.+10     	; 0xd12 <__divsf3+0x20>
     d08:	5f 3f       	cpi	r21, 0xFF	; 255
     d0a:	29 f0       	breq	.+10     	; 0xd16 <__divsf3+0x24>
     d0c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     d10:	51 11       	cpse	r21, r1
     d12:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
     d16:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>

00000d1a <__divsf3x>:
     d1a:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     d1e:	68 f3       	brcs	.-38     	; 0xcfa <__divsf3+0x8>

00000d20 <__divsf3_pse>:
     d20:	99 23       	and	r25, r25
     d22:	b1 f3       	breq	.-20     	; 0xd10 <__divsf3+0x1e>
     d24:	55 23       	and	r21, r21
     d26:	91 f3       	breq	.-28     	; 0xd0c <__divsf3+0x1a>
     d28:	95 1b       	sub	r25, r21
     d2a:	55 0b       	sbc	r21, r21
     d2c:	bb 27       	eor	r27, r27
     d2e:	aa 27       	eor	r26, r26
     d30:	62 17       	cp	r22, r18
     d32:	73 07       	cpc	r23, r19
     d34:	84 07       	cpc	r24, r20
     d36:	38 f0       	brcs	.+14     	; 0xd46 <__divsf3_pse+0x26>
     d38:	9f 5f       	subi	r25, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	aa 1f       	adc	r26, r26
     d44:	a9 f3       	breq	.-22     	; 0xd30 <__divsf3_pse+0x10>
     d46:	35 d0       	rcall	.+106    	; 0xdb2 <__divsf3_pse+0x92>
     d48:	0e 2e       	mov	r0, r30
     d4a:	3a f0       	brmi	.+14     	; 0xd5a <__divsf3_pse+0x3a>
     d4c:	e0 e8       	ldi	r30, 0x80	; 128
     d4e:	32 d0       	rcall	.+100    	; 0xdb4 <__divsf3_pse+0x94>
     d50:	91 50       	subi	r25, 0x01	; 1
     d52:	50 40       	sbci	r21, 0x00	; 0
     d54:	e6 95       	lsr	r30
     d56:	00 1c       	adc	r0, r0
     d58:	ca f7       	brpl	.-14     	; 0xd4c <__divsf3_pse+0x2c>
     d5a:	2b d0       	rcall	.+86     	; 0xdb2 <__divsf3_pse+0x92>
     d5c:	fe 2f       	mov	r31, r30
     d5e:	29 d0       	rcall	.+82     	; 0xdb2 <__divsf3_pse+0x92>
     d60:	66 0f       	add	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	88 1f       	adc	r24, r24
     d66:	bb 1f       	adc	r27, r27
     d68:	26 17       	cp	r18, r22
     d6a:	37 07       	cpc	r19, r23
     d6c:	48 07       	cpc	r20, r24
     d6e:	ab 07       	cpc	r26, r27
     d70:	b0 e8       	ldi	r27, 0x80	; 128
     d72:	09 f0       	breq	.+2      	; 0xd76 <__divsf3_pse+0x56>
     d74:	bb 0b       	sbc	r27, r27
     d76:	80 2d       	mov	r24, r0
     d78:	bf 01       	movw	r22, r30
     d7a:	ff 27       	eor	r31, r31
     d7c:	93 58       	subi	r25, 0x83	; 131
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	3a f0       	brmi	.+14     	; 0xd90 <__divsf3_pse+0x70>
     d82:	9e 3f       	cpi	r25, 0xFE	; 254
     d84:	51 05       	cpc	r21, r1
     d86:	78 f0       	brcs	.+30     	; 0xda6 <__divsf3_pse+0x86>
     d88:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     d8c:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
     d90:	5f 3f       	cpi	r21, 0xFF	; 255
     d92:	e4 f3       	brlt	.-8      	; 0xd8c <__divsf3_pse+0x6c>
     d94:	98 3e       	cpi	r25, 0xE8	; 232
     d96:	d4 f3       	brlt	.-12     	; 0xd8c <__divsf3_pse+0x6c>
     d98:	86 95       	lsr	r24
     d9a:	77 95       	ror	r23
     d9c:	67 95       	ror	r22
     d9e:	b7 95       	ror	r27
     da0:	f7 95       	ror	r31
     da2:	9f 5f       	subi	r25, 0xFF	; 255
     da4:	c9 f7       	brne	.-14     	; 0xd98 <__divsf3_pse+0x78>
     da6:	88 0f       	add	r24, r24
     da8:	91 1d       	adc	r25, r1
     daa:	96 95       	lsr	r25
     dac:	87 95       	ror	r24
     dae:	97 f9       	bld	r25, 7
     db0:	08 95       	ret
     db2:	e1 e0       	ldi	r30, 0x01	; 1
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	62 17       	cp	r22, r18
     dbe:	73 07       	cpc	r23, r19
     dc0:	84 07       	cpc	r24, r20
     dc2:	ba 07       	cpc	r27, r26
     dc4:	20 f0       	brcs	.+8      	; 0xdce <__divsf3_pse+0xae>
     dc6:	62 1b       	sub	r22, r18
     dc8:	73 0b       	sbc	r23, r19
     dca:	84 0b       	sbc	r24, r20
     dcc:	ba 0b       	sbc	r27, r26
     dce:	ee 1f       	adc	r30, r30
     dd0:	88 f7       	brcc	.-30     	; 0xdb4 <__divsf3_pse+0x94>
     dd2:	e0 95       	com	r30
     dd4:	08 95       	ret

00000dd6 <__fixunssfsi>:
     dd6:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fp_splitA>
     dda:	88 f0       	brcs	.+34     	; 0xdfe <__fixunssfsi+0x28>
     ddc:	9f 57       	subi	r25, 0x7F	; 127
     dde:	98 f0       	brcs	.+38     	; 0xe06 <__fixunssfsi+0x30>
     de0:	b9 2f       	mov	r27, r25
     de2:	99 27       	eor	r25, r25
     de4:	b7 51       	subi	r27, 0x17	; 23
     de6:	b0 f0       	brcs	.+44     	; 0xe14 <__fixunssfsi+0x3e>
     de8:	e1 f0       	breq	.+56     	; 0xe22 <__fixunssfsi+0x4c>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	1a f0       	brmi	.+6      	; 0xdfa <__fixunssfsi+0x24>
     df4:	ba 95       	dec	r27
     df6:	c9 f7       	brne	.-14     	; 0xdea <__fixunssfsi+0x14>
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <__fixunssfsi+0x4c>
     dfa:	b1 30       	cpi	r27, 0x01	; 1
     dfc:	91 f0       	breq	.+36     	; 0xe22 <__fixunssfsi+0x4c>
     dfe:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_zero>
     e02:	b1 e0       	ldi	r27, 0x01	; 1
     e04:	08 95       	ret
     e06:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_zero>
     e0a:	67 2f       	mov	r22, r23
     e0c:	78 2f       	mov	r23, r24
     e0e:	88 27       	eor	r24, r24
     e10:	b8 5f       	subi	r27, 0xF8	; 248
     e12:	39 f0       	breq	.+14     	; 0xe22 <__fixunssfsi+0x4c>
     e14:	b9 3f       	cpi	r27, 0xF9	; 249
     e16:	cc f3       	brlt	.-14     	; 0xe0a <__fixunssfsi+0x34>
     e18:	86 95       	lsr	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b3 95       	inc	r27
     e20:	d9 f7       	brne	.-10     	; 0xe18 <__fixunssfsi+0x42>
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__fixunssfsi+0x5c>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	08 95       	ret

00000e34 <__floatunsisf>:
     e34:	e8 94       	clt
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <__floatsisf+0x12>

00000e38 <__floatsisf>:
     e38:	97 fb       	bst	r25, 7
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__floatsisf+0x12>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	99 23       	and	r25, r25
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <__floatsisf+0x40>
     e4e:	f9 2f       	mov	r31, r25
     e50:	96 e9       	ldi	r25, 0x96	; 150
     e52:	bb 27       	eor	r27, r27
     e54:	93 95       	inc	r25
     e56:	f6 95       	lsr	r31
     e58:	87 95       	ror	r24
     e5a:	77 95       	ror	r23
     e5c:	67 95       	ror	r22
     e5e:	b7 95       	ror	r27
     e60:	f1 11       	cpse	r31, r1
     e62:	f8 cf       	rjmp	.-16     	; 0xe54 <__floatsisf+0x1c>
     e64:	fa f4       	brpl	.+62     	; 0xea4 <__floatsisf+0x6c>
     e66:	bb 0f       	add	r27, r27
     e68:	11 f4       	brne	.+4      	; 0xe6e <__floatsisf+0x36>
     e6a:	60 ff       	sbrs	r22, 0
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <__floatsisf+0x6c>
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <__floatsisf+0x6c>
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <__floatsisf+0x48>
     e7c:	96 e9       	ldi	r25, 0x96	; 150
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <__floatsisf+0x6a>
     e80:	77 23       	and	r23, r23
     e82:	21 f0       	breq	.+8      	; 0xe8c <__floatsisf+0x54>
     e84:	9e e8       	ldi	r25, 0x8E	; 142
     e86:	87 2f       	mov	r24, r23
     e88:	76 2f       	mov	r23, r22
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__floatsisf+0x5e>
     e8c:	66 23       	and	r22, r22
     e8e:	71 f0       	breq	.+28     	; 0xeac <__floatsisf+0x74>
     e90:	96 e8       	ldi	r25, 0x86	; 134
     e92:	86 2f       	mov	r24, r22
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	2a f0       	brmi	.+10     	; 0xea4 <__floatsisf+0x6c>
     e9a:	9a 95       	dec	r25
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	da f7       	brpl	.-10     	; 0xe9a <__floatsisf+0x62>
     ea4:	88 0f       	add	r24, r24
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret

00000eae <__fp_inf>:
     eae:	97 f9       	bld	r25, 7
     eb0:	9f 67       	ori	r25, 0x7F	; 127
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	08 95       	ret

00000eba <__fp_nan>:
     eba:	9f ef       	ldi	r25, 0xFF	; 255
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	08 95       	ret

00000ec0 <__fp_pscA>:
     ec0:	00 24       	eor	r0, r0
     ec2:	0a 94       	dec	r0
     ec4:	16 16       	cp	r1, r22
     ec6:	17 06       	cpc	r1, r23
     ec8:	18 06       	cpc	r1, r24
     eca:	09 06       	cpc	r0, r25
     ecc:	08 95       	ret

00000ece <__fp_pscB>:
     ece:	00 24       	eor	r0, r0
     ed0:	0a 94       	dec	r0
     ed2:	12 16       	cp	r1, r18
     ed4:	13 06       	cpc	r1, r19
     ed6:	14 06       	cpc	r1, r20
     ed8:	05 06       	cpc	r0, r21
     eda:	08 95       	ret

00000edc <__fp_round>:
     edc:	09 2e       	mov	r0, r25
     ede:	03 94       	inc	r0
     ee0:	00 0c       	add	r0, r0
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0xc>
     ee4:	88 23       	and	r24, r24
     ee6:	52 f0       	brmi	.+20     	; 0xefc <__fp_round+0x20>
     ee8:	bb 0f       	add	r27, r27
     eea:	40 f4       	brcc	.+16     	; 0xefc <__fp_round+0x20>
     eec:	bf 2b       	or	r27, r31
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0x18>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__fp_round+0x20>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__fp_split3>:
     efe:	57 fd       	sbrc	r21, 7
     f00:	90 58       	subi	r25, 0x80	; 128
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	59 f0       	breq	.+22     	; 0xf1e <__fp_splitA+0x10>
     f08:	5f 3f       	cpi	r21, 0xFF	; 255
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__fp_splitA+0x1a>
     f0c:	47 95       	ror	r20

00000f0e <__fp_splitA>:
     f0e:	88 0f       	add	r24, r24
     f10:	97 fb       	bst	r25, 7
     f12:	99 1f       	adc	r25, r25
     f14:	61 f0       	breq	.+24     	; 0xf2e <__fp_splitA+0x20>
     f16:	9f 3f       	cpi	r25, 0xFF	; 255
     f18:	79 f0       	breq	.+30     	; 0xf38 <__fp_splitA+0x2a>
     f1a:	87 95       	ror	r24
     f1c:	08 95       	ret
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	14 06       	cpc	r1, r20
     f24:	55 1f       	adc	r21, r21
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <__fp_split3+0xe>
     f28:	46 95       	lsr	r20
     f2a:	f1 df       	rcall	.-30     	; 0xf0e <__fp_splitA>
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <__fp_splitA+0x30>
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	99 1f       	adc	r25, r25
     f36:	f1 cf       	rjmp	.-30     	; 0xf1a <__fp_splitA+0xc>
     f38:	86 95       	lsr	r24
     f3a:	71 05       	cpc	r23, r1
     f3c:	61 05       	cpc	r22, r1
     f3e:	08 94       	sec
     f40:	08 95       	ret

00000f42 <__fp_zero>:
     f42:	e8 94       	clt

00000f44 <__fp_szero>:
     f44:	bb 27       	eor	r27, r27
     f46:	66 27       	eor	r22, r22
     f48:	77 27       	eor	r23, r23
     f4a:	cb 01       	movw	r24, r22
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <__mulsf3>:
     f50:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3x>
     f54:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     f58:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     f5c:	38 f0       	brcs	.+14     	; 0xf6c <__mulsf3+0x1c>
     f5e:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     f62:	20 f0       	brcs	.+8      	; 0xf6c <__mulsf3+0x1c>
     f64:	95 23       	and	r25, r21
     f66:	11 f0       	breq	.+4      	; 0xf6c <__mulsf3+0x1c>
     f68:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     f6c:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>

00000f76 <__mulsf3x>:
     f76:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     f7a:	70 f3       	brcs	.-36     	; 0xf58 <__mulsf3+0x8>

00000f7c <__mulsf3_pse>:
     f7c:	95 9f       	mul	r25, r21
     f7e:	c1 f3       	breq	.-16     	; 0xf70 <__mulsf3+0x20>
     f80:	95 0f       	add	r25, r21
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	55 1f       	adc	r21, r21
     f86:	62 9f       	mul	r22, r18
     f88:	f0 01       	movw	r30, r0
     f8a:	72 9f       	mul	r23, r18
     f8c:	bb 27       	eor	r27, r27
     f8e:	f0 0d       	add	r31, r0
     f90:	b1 1d       	adc	r27, r1
     f92:	63 9f       	mul	r22, r19
     f94:	aa 27       	eor	r26, r26
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	aa 1f       	adc	r26, r26
     f9c:	64 9f       	mul	r22, r20
     f9e:	66 27       	eor	r22, r22
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	66 1f       	adc	r22, r22
     fa6:	82 9f       	mul	r24, r18
     fa8:	22 27       	eor	r18, r18
     faa:	b0 0d       	add	r27, r0
     fac:	a1 1d       	adc	r26, r1
     fae:	62 1f       	adc	r22, r18
     fb0:	73 9f       	mul	r23, r19
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	83 9f       	mul	r24, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	22 1f       	adc	r18, r18
     fc0:	74 9f       	mul	r23, r20
     fc2:	33 27       	eor	r19, r19
     fc4:	a0 0d       	add	r26, r0
     fc6:	61 1d       	adc	r22, r1
     fc8:	23 1f       	adc	r18, r19
     fca:	84 9f       	mul	r24, r20
     fcc:	60 0d       	add	r22, r0
     fce:	21 1d       	adc	r18, r1
     fd0:	82 2f       	mov	r24, r18
     fd2:	76 2f       	mov	r23, r22
     fd4:	6a 2f       	mov	r22, r26
     fd6:	11 24       	eor	r1, r1
     fd8:	9f 57       	subi	r25, 0x7F	; 127
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	9a f0       	brmi	.+38     	; 0x1004 <__mulsf3_pse+0x88>
     fde:	f1 f0       	breq	.+60     	; 0x101c <__mulsf3_pse+0xa0>
     fe0:	88 23       	and	r24, r24
     fe2:	4a f0       	brmi	.+18     	; 0xff6 <__mulsf3_pse+0x7a>
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	bb 1f       	adc	r27, r27
     fea:	66 1f       	adc	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__mulsf3_pse+0x64>
     ff6:	9e 3f       	cpi	r25, 0xFE	; 254
     ff8:	51 05       	cpc	r21, r1
     ffa:	80 f0       	brcs	.+32     	; 0x101c <__mulsf3_pse+0xa0>
     ffc:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
    1000:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	e4 f3       	brlt	.-8      	; 0x1000 <__mulsf3_pse+0x84>
    1008:	98 3e       	cpi	r25, 0xE8	; 232
    100a:	d4 f3       	brlt	.-12     	; 0x1000 <__mulsf3_pse+0x84>
    100c:	86 95       	lsr	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f7 95       	ror	r31
    1016:	e7 95       	ror	r30
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	c1 f7       	brne	.-16     	; 0x100c <__mulsf3_pse+0x90>
    101c:	fe 2b       	or	r31, r30
    101e:	88 0f       	add	r24, r24
    1020:	91 1d       	adc	r25, r1
    1022:	96 95       	lsr	r25
    1024:	87 95       	ror	r24
    1026:	97 f9       	bld	r25, 7
    1028:	08 95       	ret

0000102a <__umulhisi3>:
    102a:	a2 9f       	mul	r26, r18
    102c:	b0 01       	movw	r22, r0
    102e:	b3 9f       	mul	r27, r19
    1030:	c0 01       	movw	r24, r0
    1032:	a3 9f       	mul	r26, r19
    1034:	70 0d       	add	r23, r0
    1036:	81 1d       	adc	r24, r1
    1038:	11 24       	eor	r1, r1
    103a:	91 1d       	adc	r25, r1
    103c:	b2 9f       	mul	r27, r18
    103e:	70 0d       	add	r23, r0
    1040:	81 1d       	adc	r24, r1
    1042:	11 24       	eor	r1, r1
    1044:	91 1d       	adc	r25, r1
    1046:	08 95       	ret

00001048 <_exit>:
    1048:	f8 94       	cli

0000104a <__stop_program>:
    104a:	ff cf       	rjmp	.-2      	; 0x104a <__stop_program>
