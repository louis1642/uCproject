
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fe6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f72  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800100  00800100  00000fe6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f89  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b68  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a77  00000000  00000000  00002d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00004780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000073e5  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000975  00000000  00000000  0000c099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000ca0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d6c  00000000  00000000  0000cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 33       	cpi	r26, 0x36	; 54
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  88:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
 *  Author: Luigi Catello
 */ 

#include "ADC.h"

void ADC_init(void) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	// since we will only use ADC0 and ADC1,
	//  we will set all bits [1:0] in Digital Input Disable Register 0 to 1
	DIDR0 = 0x03;
  98:	8e e7       	ldi	r24, 0x7E	; 126
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	23 e0       	ldi	r18, 0x03	; 3
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	// minimize power consumption setting PORTC[1:0] to 1 -> 0b00000011 = 0x03
	//PORTC |= 0x03;
	// reference voltage to AVcc (REFS[1:0] = 0b01)
	ADMUX |= (1 << REFS0);
  a2:	8c e7       	ldi	r24, 0x7C	; 124
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	2c e7       	ldi	r18, 0x7C	; 124
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	20 64       	ori	r18, 0x40	; 64
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	// setting the prescaler to get an AD-clock of around 125kHz
	//  16MHz / 125kHz ~= 128
	//  ADPS[2:0] = 0b111
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  b4:	8a e7       	ldi	r24, 0x7A	; 122
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2a e7       	ldi	r18, 0x7A	; 122
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	27 60       	ori	r18, 0x07	; 7
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	// result is right-aligned by default
	// resetting power reduction ADC
	PRR &= ~(1 << PRADC);
  c6:	84 e6       	ldi	r24, 0x64	; 100
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	24 e6       	ldi	r18, 0x64	; 100
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	2e 7f       	andi	r18, 0xFE	; 254
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	// ADC enable
	ADCSRA |= (1 << ADEN);
  d8:	8a e7       	ldi	r24, 0x7A	; 122
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2a e7       	ldi	r18, 0x7A	; 122
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	20 68       	ori	r18, 0x80	; 128
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
}
  ea:	00 00       	nop
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <ADC_read>:


void ADC_read(uint8_t channelNo, uint16_t* output) {
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <ADC_read+0x6>
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	7b 83       	std	Y+3, r23	; 0x03
 102:	6a 83       	std	Y+2, r22	; 0x02
	// reset the multiplexer
	ADMUX &= ~0x0f;
 104:	8c e7       	ldi	r24, 0x7C	; 124
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	2c e7       	ldi	r18, 0x7C	; 124
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	20 7f       	andi	r18, 0xF0	; 240
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
	
	// select the channel (only channels 1 and 2 are initialized)
	if (channelNo >= 2) {
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	48 f5       	brcc	.+82     	; 0x16e <ADC_read+0x7c>
		return;
	}
	ADMUX |= channelNo;
 11c:	8c e7       	ldi	r24, 0x7C	; 124
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2c e7       	ldi	r18, 0x7C	; 124
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	30 81       	ld	r19, Z
 128:	29 81       	ldd	r18, Y+1	; 0x01
 12a:	23 2b       	or	r18, r19
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	
	// start conversion
	ADCSRA |= (1 << ADSC);
 130:	8a e7       	ldi	r24, 0x7A	; 122
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2a e7       	ldi	r18, 0x7A	; 122
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 64       	ori	r18, 0x40	; 64
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	
	// polling: wait for the conversion to end
	while (ADCSRA & (1 << ADSC));
 142:	00 00       	nop
 144:	8a e7       	ldi	r24, 0x7A	; 122
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	80 81       	ld	r24, Z
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	80 74       	andi	r24, 0x40	; 64
 152:	99 27       	eor	r25, r25
 154:	89 2b       	or	r24, r25
 156:	b1 f7       	brne	.-20     	; 0x144 <ADC_read+0x52>
	
	// read the result
	*output = ADC;
 158:	88 e7       	ldi	r24, 0x78	; 120
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	20 81       	ld	r18, Z
 160:	31 81       	ldd	r19, Z+1	; 0x01
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	9b 81       	ldd	r25, Y+3	; 0x03
 166:	fc 01       	movw	r30, r24
 168:	31 83       	std	Z+1, r19	; 0x01
 16a:	20 83       	st	Z, r18
 16c:	01 c0       	rjmp	.+2      	; 0x170 <ADC_read+0x7e>
	// reset the multiplexer
	ADMUX &= ~0x0f;
	
	// select the channel (only channels 1 and 2 are initialized)
	if (channelNo >= 2) {
		return;
 16e:	00 00       	nop
	while (ADCSRA & (1 << ADSC));
	
	// read the result
	*output = ADC;
	
}
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <ADC_tmpDisable>:

void ADC_tmpDisable() {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~(1 << ADEN);
 184:	8a e7       	ldi	r24, 0x7A	; 122
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	2a e7       	ldi	r18, 0x7A	; 122
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	2f 77       	andi	r18, 0x7F	; 127
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
}
 196:	00 00       	nop
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <ADC_reenable>:

void ADC_reenable() {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN);
 1a6:	8a e7       	ldi	r24, 0x7A	; 122
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	2a e7       	ldi	r18, 0x7A	; 122
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	20 68       	ori	r18, 0x80	; 128
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
 1b8:	00 00       	nop
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <LEDs_init>:

#include "LEDs.h"


// initialize the LEDs pins as digital output
void LEDs_init(void) {
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	// configure the pins as digital outputs
	DDRD |= LED_ALL;
 1c8:	8a e2       	ldi	r24, 0x2A	; 42
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	2a e2       	ldi	r18, 0x2A	; 42
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	28 63       	ori	r18, 0x38	; 56
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
}
 1da:	00 00       	nop
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <LEDs_turnOn>:


// turn on the LED
void LEDs_turnOn(uint8_t led) {
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	1f 92       	push	r1
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	89 83       	std	Y+1, r24	; 0x01
	PORTD |= led;
 1ee:	8b e2       	ldi	r24, 0x2B	; 43
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2b e2       	ldi	r18, 0x2B	; 43
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	30 81       	ld	r19, Z
 1fa:	29 81       	ldd	r18, Y+1	; 0x01
 1fc:	23 2b       	or	r18, r19
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
}
 202:	00 00       	nop
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LEDs_turnOff>:


// turn off the LED
void LEDs_turnOff(uint8_t led) {
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	89 83       	std	Y+1, r24	; 0x01
	PORTD &= ~led;
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	2b e2       	ldi	r18, 0x2B	; 43
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	32 2f       	mov	r19, r18
 226:	29 81       	ldd	r18, Y+1	; 0x01
 228:	20 95       	com	r18
 22a:	23 23       	and	r18, r19
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
}
 230:	00 00       	nop
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <main>:


void LocalRemoteSwitch_init();


int main(void) {
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	// initialize DBG led on PC5
	DDRC |= (1 << PINC5);
 242:	87 e2       	ldi	r24, 0x27	; 39
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	27 e2       	ldi	r18, 0x27	; 39
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	20 62       	ori	r18, 0x20	; 32
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
	// debug instruction:
	//PORTC |= (1 << PORTC5);
	
	// initialize components
	TM_init();
 254:	0e 94 07 04 	call	0x80e	; 0x80e <TM_init>
	PWM_init();
 258:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <PWM_init>
	USART_init();
 25c:	0e 94 ba 05 	call	0xb74	; 0xb74 <USART_init>
	ADC_init();
 260:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PowerSaving_init();
 264:	0e 94 9c 01 	call	0x338	; 0x338 <PowerSaving_init>
	LEDs_init();
 268:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDs_init>
	LocalRemoteSwitch_init();
 26c:	0e 94 8b 01 	call	0x316	; 0x316 <LocalRemoteSwitch_init>
	
	// send hello message
	USART_send('S');
 270:	83 e5       	ldi	r24, 0x53	; 83
 272:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('e');
 276:	85 e6       	ldi	r24, 0x65	; 101
 278:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('t');
 27c:	84 e7       	ldi	r24, 0x74	; 116
 27e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('u');
 282:	85 e7       	ldi	r24, 0x75	; 117
 284:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('p');
 288:	80 e7       	ldi	r24, 0x70	; 112
 28a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send(' ');
 28e:	80 e2       	ldi	r24, 0x20	; 32
 290:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('c');
 294:	83 e6       	ldi	r24, 0x63	; 99
 296:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('o');
 29a:	8f e6       	ldi	r24, 0x6F	; 111
 29c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('m');
 2a0:	8d e6       	ldi	r24, 0x6D	; 109
 2a2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('p');
 2a6:	80 e7       	ldi	r24, 0x70	; 112
 2a8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('l');
 2ac:	8c e6       	ldi	r24, 0x6C	; 108
 2ae:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('e');
 2b2:	85 e6       	ldi	r24, 0x65	; 101
 2b4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('t');
 2b8:	84 e7       	ldi	r24, 0x74	; 116
 2ba:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('e');
 2be:	85 e6       	ldi	r24, 0x65	; 101
 2c0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('d');
 2c4:	84 e6       	ldi	r24, 0x64	; 100
 2c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	USART_send('\r');
 2ca:	8d e0       	ldi	r24, 0x0D	; 13
 2cc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
	
	// add tasks to the TaskMgr
	TM_add_task(Task_ReadOnOffSw, 0, 200);
 2d0:	48 ec       	ldi	r20, 0xC8	; 200
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	85 ee       	ldi	r24, 0xE5	; 229
 2da:	94 e0       	ldi	r25, 0x04	; 4
 2dc:	0e 94 19 04 	call	0x832	; 0x832 <TM_add_task>
	TM_add_task(Task_ReadTargetTemp, 10, 50);
 2e0:	42 e3       	ldi	r20, 0x32	; 50
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	6a e0       	ldi	r22, 0x0A	; 10
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	89 ef       	ldi	r24, 0xF9	; 249
 2ea:	94 e0       	ldi	r25, 0x04	; 4
 2ec:	0e 94 19 04 	call	0x832	; 0x832 <TM_add_task>
	TM_add_task(Task_Heat, 20, 15);
 2f0:	4f e0       	ldi	r20, 0x0F	; 15
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	64 e1       	ldi	r22, 0x14	; 20
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	83 e3       	ldi	r24, 0x33	; 51
 2fa:	95 e0       	ldi	r25, 0x05	; 5
 2fc:	0e 94 19 04 	call	0x832	; 0x832 <TM_add_task>
	TM_add_task(Task_WriteLEDs, 100, 200);
 300:	48 ec       	ldi	r20, 0xC8	; 200
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	64 e6       	ldi	r22, 0x64	; 100
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	81 e9       	ldi	r24, 0x91	; 145
 30a:	95 e0       	ldi	r25, 0x05	; 5
 30c:	0e 94 19 04 	call	0x832	; 0x832 <TM_add_task>
	
	// main loop: execute the tasks when they are ready
	while (1) {
		TM_dispatcher();
 310:	0e 94 77 04 	call	0x8ee	; 0x8ee <TM_dispatcher>
	}
 314:	fd cf       	rjmp	.-6      	; 0x310 <main+0xd6>

00000316 <LocalRemoteSwitch_init>:
}


void LocalRemoteSwitch_init() {
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	// set PC2 to pull-up mode
	PORTC |= (1 << PORTC2);
 31e:	88 e2       	ldi	r24, 0x28	; 40
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	28 e2       	ldi	r18, 0x28	; 40
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	24 60       	ori	r18, 0x04	; 4
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
 330:	00 00       	nop
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <PowerSaving_init>:
 *  Author: Luigi Catello
 */ 

#include "PowerSaving.h"

void PowerSaving_init() {
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	// Setup interrupts
	// Enable Pin Change Interrupt 18
	PCICR |= (1 << PCIE2);
 340:	88 e6       	ldi	r24, 0x68	; 104
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	28 e6       	ldi	r18, 0x68	; 104
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	24 60       	ori	r18, 0x04	; 4
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
	// Mask PCINT18
	PCMSK2 |= (1 << PCINT18);
 352:	8d e6       	ldi	r24, 0x6D	; 109
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2d e6       	ldi	r18, 0x6D	; 109
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	24 60       	ori	r18, 0x04	; 4
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
 364:	78 94       	sei
}
 366:	00 00       	nop
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <PowerSaving_sleep>:


void PowerSaving_sleep() {
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
	// turn off LEDs
	LEDs_turnOff(LED_ALL);
 376:	88 e3       	ldi	r24, 0x38	; 56
 378:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>

	// disable ADC
	ADC_tmpDisable();
 37c:	0e 94 be 00 	call	0x17c	; 0x17c <ADC_tmpDisable>
	
	// select Power Down sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 380:	83 e5       	ldi	r24, 0x53	; 83
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	23 e5       	ldi	r18, 0x53	; 83
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	21 7f       	andi	r18, 0xF1	; 241
 38e:	24 60       	ori	r18, 0x04	; 4
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
	// disable interrupt
	cli();
 394:	f8 94       	cli
	// set SE bit
	sleep_enable();
 396:	83 e5       	ldi	r24, 0x53	; 83
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	23 e5       	ldi	r18, 0x53	; 83
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	f9 01       	movw	r30, r18
 3a0:	20 81       	ld	r18, Z
 3a2:	21 60       	ori	r18, 0x01	; 1
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
	// enable interrupts
	sei();
 3a8:	78 94       	sei
	// sleep instruction
	sleep_cpu();
 3aa:	88 95       	sleep
	//
	// --> entry point after interrupt
	// reset SE bit
	sleep_disable();
 3ac:	83 e5       	ldi	r24, 0x53	; 83
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	23 e5       	ldi	r18, 0x53	; 83
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	2e 7f       	andi	r18, 0xFE	; 254
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
	
	// turn on LEDs like before
	Task_WriteLEDs();
 3be:	0e 94 91 05 	call	0xb22	; 0xb22 <Task_WriteLEDs>
	
	// enable ADC again
	ADC_reenable();
 3c2:	0e 94 cf 00 	call	0x19e	; 0x19e <ADC_reenable>
}
 3c6:	00 00       	nop
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <__vector_5>:

ISR(PCINT2_vect){
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	// interrupt used to wake up the microcontroller
 3e2:	00 00       	nop
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	0f 90       	pop	r0
 3ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <PWM_init>:

#include "PWM.h"


// initialize the PWM on PB1
void PWM_init(void) {
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
	//OC1A - PB1 output
	DDRB |= 0x2;
 3fc:	84 e2       	ldi	r24, 0x24	; 36
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	24 e2       	ldi	r18, 0x24	; 36
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	f9 01       	movw	r30, r18
 406:	20 81       	ld	r18, Z
 408:	22 60       	ori	r18, 0x02	; 2
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	
	//Set Compare Output Mode for channel 1
	TCCR1A |= (1 << COM1A1);
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	20 e8       	ldi	r18, 0x80	; 128
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	f9 01       	movw	r30, r18
 418:	20 81       	ld	r18, Z
 41a:	20 68       	ori	r18, 0x80	; 128
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
	
	//Table 15-5 of the datasheet
	TCCR1A |= (1 << WGM11);
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	20 e8       	ldi	r18, 0x80	; 128
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	f9 01       	movw	r30, r18
 42a:	20 81       	ld	r18, Z
 42c:	22 60       	ori	r18, 0x02	; 2
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 432:	81 e8       	ldi	r24, 0x81	; 129
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	21 e8       	ldi	r18, 0x81	; 129
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	f9 01       	movw	r30, r18
 43c:	20 81       	ld	r18, Z
 43e:	28 61       	ori	r18, 0x18	; 24
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
	
	// Set PWM frequency/top value
	ICR1 = (FRREQ / (PRESCALER * STROBE_FREQ)) - 1;
 444:	86 e8       	ldi	r24, 0x86	; 134
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	2f e3       	ldi	r18, 0x3F	; 63
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	fc 01       	movw	r30, r24
 44e:	31 83       	std	Z+1, r19	; 0x01
 450:	20 83       	st	Z, r18
	OCR1A = ICR1 * STARTING_DUTY_CYCLE / 100;
 452:	48 e8       	ldi	r20, 0x88	; 136
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	86 e8       	ldi	r24, 0x86	; 134
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	fc 01       	movw	r30, r24
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	96 95       	lsr	r25
 466:	87 95       	ror	r24
 468:	9c 01       	movw	r18, r24
 46a:	ab e7       	ldi	r26, 0x7B	; 123
 46c:	b4 e1       	ldi	r27, 0x14	; 20
 46e:	0e 94 a8 07 	call	0xf50	; 0xf50 <__umulhisi3>
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	fa 01       	movw	r30, r20
 478:	91 83       	std	Z+1, r25	; 0x01
 47a:	80 83       	st	Z, r24
	
	PWM_state = 1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 482:	00 00       	nop
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <PWM_setDutyCycle>:


// set a new duty cycle for the PWM:
// percent must be in the interval [0;100]
void PWM_setDutyCycle(uint8_t percent) {
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	1f 92       	push	r1
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	89 83       	std	Y+1, r24	; 0x01
	if (percent == 0) {
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	88 23       	and	r24, r24
 49a:	19 f4       	brne	.+6      	; 0x4a2 <PWM_setDutyCycle+0x18>
		PWM_stop();
 49c:	0e 94 ac 02 	call	0x558	; 0x558 <PWM_stop>
		return;
 4a0:	31 c0       	rjmp	.+98     	; 0x504 <PWM_setDutyCycle+0x7a>
	}
	if (percent > 100) {
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	85 36       	cpi	r24, 0x65	; 101
 4a6:	10 f0       	brcs	.+4      	; 0x4ac <PWM_setDutyCycle+0x22>
		percent = 100;
 4a8:	84 e6       	ldi	r24, 0x64	; 100
 4aa:	89 83       	std	Y+1, r24	; 0x01
	}
	if (PWM_state == 0)	{
 4ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4b0:	88 23       	and	r24, r24
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <PWM_setDutyCycle+0x2e>
		PWM_start();
 4b4:	0e 94 86 02 	call	0x50c	; 0x50c <PWM_start>
	}

	ICR1 = (FRREQ / (PRESCALER * STROBE_FREQ)) - 1;
 4b8:	86 e8       	ldi	r24, 0x86	; 134
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	2f e3       	ldi	r18, 0x3F	; 63
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	31 83       	std	Z+1, r19	; 0x01
 4c4:	20 83       	st	Z, r18
	OCR1A = ICR1 * percent / 100;
 4c6:	48 e8       	ldi	r20, 0x88	; 136
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	86 e8       	ldi	r24, 0x86	; 134
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fc 01       	movw	r30, r24
 4d0:	60 81       	ld	r22, Z
 4d2:	71 81       	ldd	r23, Z+1	; 0x01
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	62 9f       	mul	r22, r18
 4dc:	c0 01       	movw	r24, r0
 4de:	63 9f       	mul	r22, r19
 4e0:	90 0d       	add	r25, r0
 4e2:	72 9f       	mul	r23, r18
 4e4:	90 0d       	add	r25, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	9c 01       	movw	r18, r24
 4f2:	ab e7       	ldi	r26, 0x7B	; 123
 4f4:	b4 e1       	ldi	r27, 0x14	; 20
 4f6:	0e 94 a8 07 	call	0xf50	; 0xf50 <__umulhisi3>
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	fa 01       	movw	r30, r20
 500:	91 83       	std	Z+1, r25	; 0x01
 502:	80 83       	st	Z, r24

}
 504:	0f 90       	pop	r0
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <PWM_start>:


// start the counter for the PWM
void PWM_start(void) {
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
	// PB1 as output
	DDRB |= 0x2;
 514:	84 e2       	ldi	r24, 0x24	; 36
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	24 e2       	ldi	r18, 0x24	; 36
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	20 81       	ld	r18, Z
 520:	22 60       	ori	r18, 0x02	; 2
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
	//Set Compare Output Mode for channel 1
	TCCR1A |= (1 << COM1A1);
 526:	80 e8       	ldi	r24, 0x80	; 128
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	20 e8       	ldi	r18, 0x80	; 128
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	20 68       	ori	r18, 0x80	; 128
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
	// timer on
	TCCR1B |= (1 << CS10);
 538:	81 e8       	ldi	r24, 0x81	; 129
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	21 e8       	ldi	r18, 0x81	; 129
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	21 60       	ori	r18, 0x01	; 1
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
	
	PWM_state = 1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 550:	00 00       	nop
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <PWM_stop>:


// stop the counter for the PWM
void PWM_stop(void) {
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
	// unset compare output mode (CH1)
	TCCR1A &= ~(1 << COM1A1);
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	20 e8       	ldi	r18, 0x80	; 128
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	f9 01       	movw	r30, r18
 56a:	20 81       	ld	r18, Z
 56c:	2f 77       	andi	r18, 0x7F	; 127
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
	// stop counter
	TCCR1B &= ~(1 << CS10);
 572:	81 e8       	ldi	r24, 0x81	; 129
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	21 e8       	ldi	r18, 0x81	; 129
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	2e 7f       	andi	r18, 0xFE	; 254
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
	// write digital 0 on PB1
	PORTB &= ~0x2;
 584:	85 e2       	ldi	r24, 0x25	; 37
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	25 e2       	ldi	r18, 0x25	; 37
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	20 81       	ld	r18, Z
 590:	2d 7f       	andi	r18, 0xFD	; 253
 592:	fc 01       	movw	r30, r24
 594:	20 83       	st	Z, r18
	
	PWM_state = 0;
 596:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 59a:	00 00       	nop
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <TM_init_update>:

/* INTERNAL FUNCTIONS */
#pragma region INTERNAL_FUNC

// initialize timer0 to define the ticks
void TM_init_update(void) {
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
	// timer 0
	TCCR0B |= (1<<CS00);	// normal mode, no prescaler
 5aa:	85 e4       	ldi	r24, 0x45	; 69
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	25 e4       	ldi	r18, 0x45	; 69
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	f9 01       	movw	r30, r18
 5b4:	20 81       	ld	r18, Z
 5b6:	21 60       	ori	r18, 0x01	; 1
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 83       	st	Z, r18
	TIMSK0 |= (1<<TOIE0);	// Timer overflow interrupt enable
 5bc:	8e e6       	ldi	r24, 0x6E	; 110
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	2e e6       	ldi	r18, 0x6E	; 110
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	f9 01       	movw	r30, r18
 5c6:	20 81       	ld	r18, Z
 5c8:	21 60       	ori	r18, 0x01	; 1
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
	sei();					// enable interrupts;
 5ce:	78 94       	sei
}
 5d0:	00 00       	nop
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <TM_init_tasks>:


// initialize the tasks
void TM_init_tasks(void){
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	00 d0       	rcall	.+0      	; 0x5de <TM_init_tasks+0x6>
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0;i<TASK_MAX;i++) {
 5e2:	1a 82       	std	Y+2, r1	; 0x02
 5e4:	19 82       	std	Y+1, r1	; 0x01
 5e6:	15 c0       	rjmp	.+42     	; 0x612 <TM_init_tasks+0x3a>
		Task_list[i].task_function = NULLPTR; // empty slots
 5e8:	29 81       	ldd	r18, Y+1	; 0x01
 5ea:	3a 81       	ldd	r19, Y+2	; 0x02
 5ec:	c9 01       	movw	r24, r18
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	82 1b       	sub	r24, r18
 5fc:	93 0b       	sbc	r25, r19
 5fe:	8c 5f       	subi	r24, 0xFC	; 252
 600:	9e 4f       	sbci	r25, 0xFE	; 254
 602:	fc 01       	movw	r30, r24
 604:	11 82       	std	Z+1, r1	; 0x01
 606:	10 82       	st	Z, r1


// initialize the tasks
void TM_init_tasks(void){
	int i;
	for(i=0;i<TASK_MAX;i++) {
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	9a 83       	std	Y+2, r25	; 0x02
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	06 97       	sbiw	r24, 0x06	; 6
 618:	3c f3       	brlt	.-50     	; 0x5e8 <TM_init_tasks+0x10>
		Task_list[i].task_function = NULLPTR; // empty slots
	}
}
 61a:	00 00       	nop
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <TM_update>:


// on each tick, advance on the timetable
void TM_update(void) {
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	00 d0       	rcall	.+0      	; 0x62c <TM_update+0x6>
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0;i<TASK_MAX;i++) {	  						// check every task
 630:	1a 82       	std	Y+2, r1	; 0x02
 632:	19 82       	std	Y+1, r1	; 0x01
 634:	a3 c0       	rjmp	.+326    	; 0x77c <TM_update+0x156>
		if(Task_list[i].task_function != NULLPTR) {	    // not an empty slot
 636:	29 81       	ldd	r18, Y+1	; 0x01
 638:	3a 81       	ldd	r19, Y+2	; 0x02
 63a:	c9 01       	movw	r24, r18
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	82 1b       	sub	r24, r18
 64a:	93 0b       	sbc	r25, r19
 64c:	8c 5f       	subi	r24, 0xFC	; 252
 64e:	9e 4f       	sbci	r25, 0xFE	; 254
 650:	fc 01       	movw	r30, r24
 652:	80 81       	ld	r24, Z
 654:	91 81       	ldd	r25, Z+1	; 0x01
 656:	89 2b       	or	r24, r25
 658:	09 f4       	brne	.+2      	; 0x65c <TM_update+0x36>
 65a:	8b c0       	rjmp	.+278    	; 0x772 <TM_update+0x14c>
			if(Task_list[i].delay == 0) {				// time to run
 65c:	29 81       	ldd	r18, Y+1	; 0x01
 65e:	3a 81       	ldd	r19, Y+2	; 0x02
 660:	c9 01       	movw	r24, r18
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	82 1b       	sub	r24, r18
 670:	93 0b       	sbc	r25, r19
 672:	8a 5f       	subi	r24, 0xFA	; 250
 674:	9e 4f       	sbci	r25, 0xFE	; 254
 676:	fc 01       	movw	r30, r24
 678:	80 81       	ld	r24, Z
 67a:	91 81       	ldd	r25, Z+1	; 0x01
 67c:	89 2b       	or	r24, r25
 67e:	09 f0       	breq	.+2      	; 0x682 <TM_update+0x5c>
 680:	55 c0       	rjmp	.+170    	; 0x72c <TM_update+0x106>
				Task_list[i].run += 1;					// please run this
 682:	29 81       	ldd	r18, Y+1	; 0x01
 684:	3a 81       	ldd	r19, Y+2	; 0x02
 686:	c9 01       	movw	r24, r18
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	82 1b       	sub	r24, r18
 696:	93 0b       	sbc	r25, r19
 698:	86 5f       	subi	r24, 0xF6	; 246
 69a:	9e 4f       	sbci	r25, 0xFE	; 254
 69c:	fc 01       	movw	r30, r24
 69e:	80 81       	ld	r24, Z
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	48 2f       	mov	r20, r24
 6a4:	29 81       	ldd	r18, Y+1	; 0x01
 6a6:	3a 81       	ldd	r19, Y+2	; 0x02
 6a8:	c9 01       	movw	r24, r18
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	82 1b       	sub	r24, r18
 6b8:	93 0b       	sbc	r25, r19
 6ba:	86 5f       	subi	r24, 0xF6	; 246
 6bc:	9e 4f       	sbci	r25, 0xFE	; 254
 6be:	fc 01       	movw	r30, r24
 6c0:	40 83       	st	Z, r20
				if(Task_list[i].interval != 0) {		// periodic task
 6c2:	29 81       	ldd	r18, Y+1	; 0x01
 6c4:	3a 81       	ldd	r19, Y+2	; 0x02
 6c6:	c9 01       	movw	r24, r18
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	82 1b       	sub	r24, r18
 6d6:	93 0b       	sbc	r25, r19
 6d8:	88 5f       	subi	r24, 0xF8	; 248
 6da:	9e 4f       	sbci	r25, 0xFE	; 254
 6dc:	fc 01       	movw	r30, r24
 6de:	80 81       	ld	r24, Z
 6e0:	91 81       	ldd	r25, Z+1	; 0x01
 6e2:	89 2b       	or	r24, r25
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <TM_update+0xc2>
 6e6:	45 c0       	rjmp	.+138    	; 0x772 <TM_update+0x14c>
					Task_list[i].delay = Task_list[i].interval;
 6e8:	29 81       	ldd	r18, Y+1	; 0x01
 6ea:	3a 81       	ldd	r19, Y+2	; 0x02
 6ec:	c9 01       	movw	r24, r18
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	82 1b       	sub	r24, r18
 6fc:	93 0b       	sbc	r25, r19
 6fe:	88 5f       	subi	r24, 0xF8	; 248
 700:	9e 4f       	sbci	r25, 0xFE	; 254
 702:	fc 01       	movw	r30, r24
 704:	80 81       	ld	r24, Z
 706:	91 81       	ldd	r25, Z+1	; 0x01
 708:	ac 01       	movw	r20, r24
 70a:	29 81       	ldd	r18, Y+1	; 0x01
 70c:	3a 81       	ldd	r19, Y+2	; 0x02
 70e:	c9 01       	movw	r24, r18
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	82 1b       	sub	r24, r18
 71e:	93 0b       	sbc	r25, r19
 720:	8a 5f       	subi	r24, 0xFA	; 250
 722:	9e 4f       	sbci	r25, 0xFE	; 254
 724:	fc 01       	movw	r30, r24
 726:	51 83       	std	Z+1, r21	; 0x01
 728:	40 83       	st	Z, r20
 72a:	23 c0       	rjmp	.+70     	; 0x772 <TM_update+0x14c>
				}
			} else {
				Task_list[i].delay -=1;		// decrement waiting time by one tick
 72c:	29 81       	ldd	r18, Y+1	; 0x01
 72e:	3a 81       	ldd	r19, Y+2	; 0x02
 730:	c9 01       	movw	r24, r18
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	82 1b       	sub	r24, r18
 740:	93 0b       	sbc	r25, r19
 742:	8a 5f       	subi	r24, 0xFA	; 250
 744:	9e 4f       	sbci	r25, 0xFE	; 254
 746:	fc 01       	movw	r30, r24
 748:	80 81       	ld	r24, Z
 74a:	91 81       	ldd	r25, Z+1	; 0x01
 74c:	ac 01       	movw	r20, r24
 74e:	41 50       	subi	r20, 0x01	; 1
 750:	51 09       	sbc	r21, r1
 752:	29 81       	ldd	r18, Y+1	; 0x01
 754:	3a 81       	ldd	r19, Y+2	; 0x02
 756:	c9 01       	movw	r24, r18
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	82 1b       	sub	r24, r18
 766:	93 0b       	sbc	r25, r19
 768:	8a 5f       	subi	r24, 0xFA	; 250
 76a:	9e 4f       	sbci	r25, 0xFE	; 254
 76c:	fc 01       	movw	r30, r24
 76e:	51 83       	std	Z+1, r21	; 0x01
 770:	40 83       	st	Z, r20


// on each tick, advance on the timetable
void TM_update(void) {
	int i;
	for(i=0;i<TASK_MAX;i++) {	  						// check every task
 772:	89 81       	ldd	r24, Y+1	; 0x01
 774:	9a 81       	ldd	r25, Y+2	; 0x02
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	9a 83       	std	Y+2, r25	; 0x02
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	89 81       	ldd	r24, Y+1	; 0x01
 77e:	9a 81       	ldd	r25, Y+2	; 0x02
 780:	06 97       	sbiw	r24, 0x06	; 6
 782:	0c f4       	brge	.+2      	; 0x786 <TM_update+0x160>
 784:	58 cf       	rjmp	.-336    	; 0x636 <TM_update+0x10>
			} else {
				Task_list[i].delay -=1;		// decrement waiting time by one tick
			}
		}
	}
}
 786:	00 00       	nop
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	08 95       	ret

00000792 <__vector_16>:


ISR (TIMER0_OVF_vect) {
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	6f 93       	push	r22
 7a8:	7f 93       	push	r23
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
	if(overflows++ >= OVF_MAX) {
 7be:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <overflows>
 7c2:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <overflows+0x1>
 7c6:	9c 01       	movw	r18, r24
 7c8:	2f 5f       	subi	r18, 0xFF	; 255
 7ca:	3f 4f       	sbci	r19, 0xFF	; 255
 7cc:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <overflows+0x1>
 7d0:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <overflows>
 7d4:	ce 97       	sbiw	r24, 0x3e	; 62
 7d6:	30 f0       	brcs	.+12     	; 0x7e4 <__vector_16+0x52>
		TM_update();
 7d8:	0e 94 13 03 	call	0x626	; 0x626 <TM_update>
		overflows = 0;
 7dc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <overflows+0x1>
 7e0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <overflows>
	}
}
 7e4:	00 00       	nop
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 808:	0f 90       	pop	r0
 80a:	1f 90       	pop	r1
 80c:	18 95       	reti

0000080e <TM_init>:
/* END INTERNAL FUNCTIONS */
#pragma endregion INTERNAL_FUNC


// initialize task manager
void TM_init(void) {
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
	overflows = 0;
 816:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <overflows+0x1>
 81a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <overflows>
	addTaskIndex = 0;
 81e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <addTaskIndex>
	TM_init_tasks();
 822:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <TM_init_tasks>
	TM_init_update();
 826:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <TM_init_update>
}
 82a:	00 00       	nop
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	08 95       	ret

00000832 <TM_add_task>:


// add a new task to the queue
void TM_add_task(void (*function)(void), int16_t delay, int16_t interval) {
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	00 d0       	rcall	.+0      	; 0x838 <TM_add_task+0x6>
 838:	00 d0       	rcall	.+0      	; 0x83a <TM_add_task+0x8>
 83a:	00 d0       	rcall	.+0      	; 0x83c <TM_add_task+0xa>
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	9a 83       	std	Y+2, r25	; 0x02
 842:	89 83       	std	Y+1, r24	; 0x01
 844:	7c 83       	std	Y+4, r23	; 0x04
 846:	6b 83       	std	Y+3, r22	; 0x03
 848:	5e 83       	std	Y+6, r21	; 0x06
 84a:	4d 83       	std	Y+5, r20	; 0x05
	if (addTaskIndex >= TASK_MAX) {
 84c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
 850:	86 30       	cpi	r24, 0x06	; 6
 852:	08 f0       	brcs	.+2      	; 0x856 <TM_add_task+0x24>
 854:	42 c0       	rjmp	.+132    	; 0x8da <TM_add_task+0xa8>
		return;
	}
	Task_list[addTaskIndex].task_function = function;
 856:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
 85a:	28 2f       	mov	r18, r24
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	c9 01       	movw	r24, r18
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	82 1b       	sub	r24, r18
 86e:	93 0b       	sbc	r25, r19
 870:	8c 5f       	subi	r24, 0xFC	; 252
 872:	9e 4f       	sbci	r25, 0xFE	; 254
 874:	29 81       	ldd	r18, Y+1	; 0x01
 876:	3a 81       	ldd	r19, Y+2	; 0x02
 878:	fc 01       	movw	r30, r24
 87a:	31 83       	std	Z+1, r19	; 0x01
 87c:	20 83       	st	Z, r18
	Task_list[addTaskIndex].delay = delay;
 87e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	c9 01       	movw	r24, r18
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	82 1b       	sub	r24, r18
 896:	93 0b       	sbc	r25, r19
 898:	8a 5f       	subi	r24, 0xFA	; 250
 89a:	9e 4f       	sbci	r25, 0xFE	; 254
 89c:	2b 81       	ldd	r18, Y+3	; 0x03
 89e:	3c 81       	ldd	r19, Y+4	; 0x04
 8a0:	fc 01       	movw	r30, r24
 8a2:	31 83       	std	Z+1, r19	; 0x01
 8a4:	20 83       	st	Z, r18
	Task_list[addTaskIndex].interval = interval;
 8a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	4d 81       	ldd	r20, Y+5	; 0x05
 8b0:	5e 81       	ldd	r21, Y+6	; 0x06
 8b2:	c9 01       	movw	r24, r18
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	82 1b       	sub	r24, r18
 8c2:	93 0b       	sbc	r25, r19
 8c4:	88 5f       	subi	r24, 0xF8	; 248
 8c6:	9e 4f       	sbci	r25, 0xFE	; 254
 8c8:	fc 01       	movw	r30, r24
 8ca:	51 83       	std	Z+1, r21	; 0x01
 8cc:	40 83       	st	Z, r20
	++addTaskIndex;
 8ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addTaskIndex>
 8d2:	8f 5f       	subi	r24, 0xFF	; 255
 8d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <addTaskIndex>
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <TM_add_task+0xaa>


// add a new task to the queue
void TM_add_task(void (*function)(void), int16_t delay, int16_t interval) {
	if (addTaskIndex >= TASK_MAX) {
		return;
 8da:	00 00       	nop
	}
	Task_list[addTaskIndex].task_function = function;
	Task_list[addTaskIndex].delay = delay;
	Task_list[addTaskIndex].interval = interval;
	++addTaskIndex;
}
 8dc:	26 96       	adiw	r28, 0x06	; 6
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	08 95       	ret

000008ee <TM_dispatcher>:


// execute the pending task
void TM_dispatcher(void) {
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	00 d0       	rcall	.+0      	; 0x8f4 <TM_dispatcher+0x6>
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
	int i;
	// check every task
	for(i=0;i<TASK_MAX;i++) {
 8f8:	1a 82       	std	Y+2, r1	; 0x02
 8fa:	19 82       	std	Y+1, r1	; 0x01
 8fc:	5b c0       	rjmp	.+182    	; 0x9b4 <__stack+0xb5>
		// if the slot is not empty
		if(Task_list[i].task_function != NULLPTR) {
 8fe:	29 81       	ldd	r18, Y+1	; 0x01
 900:	3a 81       	ldd	r19, Y+2	; 0x02
 902:	c9 01       	movw	r24, r18
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	82 1b       	sub	r24, r18
 912:	93 0b       	sbc	r25, r19
 914:	8c 5f       	subi	r24, 0xFC	; 252
 916:	9e 4f       	sbci	r25, 0xFE	; 254
 918:	fc 01       	movw	r30, r24
 91a:	80 81       	ld	r24, Z
 91c:	91 81       	ldd	r25, Z+1	; 0x01
 91e:	89 2b       	or	r24, r25
 920:	09 f4       	brne	.+2      	; 0x924 <__stack+0x25>
 922:	43 c0       	rjmp	.+134    	; 0x9aa <__stack+0xab>
			// if it is the right time to run
			if(Task_list[i].run > 0) {
 924:	29 81       	ldd	r18, Y+1	; 0x01
 926:	3a 81       	ldd	r19, Y+2	; 0x02
 928:	c9 01       	movw	r24, r18
 92a:	88 0f       	add	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	82 1b       	sub	r24, r18
 938:	93 0b       	sbc	r25, r19
 93a:	86 5f       	subi	r24, 0xF6	; 246
 93c:	9e 4f       	sbci	r25, 0xFE	; 254
 93e:	fc 01       	movw	r30, r24
 940:	80 81       	ld	r24, Z
 942:	18 16       	cp	r1, r24
 944:	94 f5       	brge	.+100    	; 0x9aa <__stack+0xab>
				// execute the function
				Task_list[i].task_function();
 946:	29 81       	ldd	r18, Y+1	; 0x01
 948:	3a 81       	ldd	r19, Y+2	; 0x02
 94a:	c9 01       	movw	r24, r18
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	82 1b       	sub	r24, r18
 95a:	93 0b       	sbc	r25, r19
 95c:	8c 5f       	subi	r24, 0xFC	; 252
 95e:	9e 4f       	sbci	r25, 0xFE	; 254
 960:	fc 01       	movw	r30, r24
 962:	80 81       	ld	r24, Z
 964:	91 81       	ldd	r25, Z+1	; 0x01
 966:	fc 01       	movw	r30, r24
 968:	09 95       	icall
				// decrease run request
				Task_list[i].run -= 1;
 96a:	29 81       	ldd	r18, Y+1	; 0x01
 96c:	3a 81       	ldd	r19, Y+2	; 0x02
 96e:	c9 01       	movw	r24, r18
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	88 0f       	add	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	82 1b       	sub	r24, r18
 97e:	93 0b       	sbc	r25, r19
 980:	86 5f       	subi	r24, 0xF6	; 246
 982:	9e 4f       	sbci	r25, 0xFE	; 254
 984:	fc 01       	movw	r30, r24
 986:	80 81       	ld	r24, Z
 988:	81 50       	subi	r24, 0x01	; 1
 98a:	48 2f       	mov	r20, r24
 98c:	29 81       	ldd	r18, Y+1	; 0x01
 98e:	3a 81       	ldd	r19, Y+2	; 0x02
 990:	c9 01       	movw	r24, r18
 992:	88 0f       	add	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	88 0f       	add	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	82 1b       	sub	r24, r18
 9a0:	93 0b       	sbc	r25, r19
 9a2:	86 5f       	subi	r24, 0xF6	; 246
 9a4:	9e 4f       	sbci	r25, 0xFE	; 254
 9a6:	fc 01       	movw	r30, r24
 9a8:	40 83       	st	Z, r20

// execute the pending task
void TM_dispatcher(void) {
	int i;
	// check every task
	for(i=0;i<TASK_MAX;i++) {
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	9a 81       	ldd	r25, Y+2	; 0x02
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	9a 83       	std	Y+2, r25	; 0x02
 9b2:	89 83       	std	Y+1, r24	; 0x01
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	9a 81       	ldd	r25, Y+2	; 0x02
 9b8:	06 97       	sbiw	r24, 0x06	; 6
 9ba:	0c f4       	brge	.+2      	; 0x9be <__stack+0xbf>
 9bc:	a0 cf       	rjmp	.-192    	; 0x8fe <TM_dispatcher+0x10>
				// decrease run request
				Task_list[i].run -= 1;
			}
		}
	}
}
 9be:	00 00       	nop
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	08 95       	ret

000009ca <Task_ReadOnOffSw>:
uint16_t currentTemperature;

uint16_t abs(int16_t x);

// read On/Off from PD2
void Task_ReadOnOffSw(void) {
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
	if ((PIND & (1 << PIND2)) == 0) {
 9d2:	89 e2       	ldi	r24, 0x29	; 41
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	fc 01       	movw	r30, r24
 9d8:	80 81       	ld	r24, Z
 9da:	88 2f       	mov	r24, r24
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	84 70       	andi	r24, 0x04	; 4
 9e0:	99 27       	eor	r25, r25
 9e2:	89 2b       	or	r24, r25
 9e4:	11 f0       	breq	.+4      	; 0x9ea <Task_ReadOnOffSw+0x20>
		// ON
	} else {
		// OFF
		PowerSaving_sleep();
 9e6:	0e 94 b7 01 	call	0x36e	; 0x36e <PowerSaving_sleep>
	}
}
 9ea:	00 00       	nop
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	08 95       	ret

000009f2 <Task_ReadTargetTemp>:


// read Local/External from PC2 (pull-up)
// acquire target temperature from either the potentiometer or the terminal
void Task_ReadTargetTemp(void) {
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
	if ((PINC & (1 << PINC2)) == 0) {
 9fa:	86 e2       	ldi	r24, 0x26	; 38
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	fc 01       	movw	r30, r24
 a00:	80 81       	ld	r24, Z
 a02:	88 2f       	mov	r24, r24
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	84 70       	andi	r24, 0x04	; 4
 a08:	99 27       	eor	r25, r25
 a0a:	89 2b       	or	r24, r25
 a0c:	31 f4       	brne	.+12     	; 0xa1a <Task_ReadTargetTemp+0x28>
		// closed switch -> local
		// read target temperature from potentiometer (ADC1)
		ADC_read(1, &targetTemperature);
 a0e:	61 e3       	ldi	r22, 0x31	; 49
 a10:	71 e0       	ldi	r23, 0x01	; 1
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
	} else {
		// open switch -> external
		// read target temperature from terminal
		targetTemperature = (uint16_t) (USART_read() * 10.23);
	}
}
 a18:	22 c0       	rjmp	.+68     	; 0xa5e <Task_ReadTargetTemp+0x6c>
		// read target temperature from potentiometer (ADC1)
		ADC_read(1, &targetTemperature);
	} else {
		// open switch -> external
		// read target temperature from terminal
		targetTemperature = (uint16_t) (USART_read() * 10.23);
 a1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <USART_read>
 a1e:	88 2f       	mov	r24, r24
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	09 2e       	mov	r0, r25
 a24:	00 0c       	add	r0, r0
 a26:	aa 0b       	sbc	r26, r26
 a28:	bb 0b       	sbc	r27, r27
 a2a:	bc 01       	movw	r22, r24
 a2c:	cd 01       	movw	r24, r26
 a2e:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
 a32:	dc 01       	movw	r26, r24
 a34:	cb 01       	movw	r24, r22
 a36:	24 e1       	ldi	r18, 0x14	; 20
 a38:	3e ea       	ldi	r19, 0xAE	; 174
 a3a:	43 e2       	ldi	r20, 0x23	; 35
 a3c:	51 e4       	ldi	r21, 0x41	; 65
 a3e:	bc 01       	movw	r22, r24
 a40:	cd 01       	movw	r24, r26
 a42:	0e 94 13 07 	call	0xe26	; 0xe26 <__mulsf3>
 a46:	dc 01       	movw	r26, r24
 a48:	cb 01       	movw	r24, r22
 a4a:	bc 01       	movw	r22, r24
 a4c:	cd 01       	movw	r24, r26
 a4e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
 a52:	dc 01       	movw	r26, r24
 a54:	cb 01       	movw	r24, r22
 a56:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <targetTemperature+0x1>
 a5a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <targetTemperature>
	}
}
 a5e:	00 00       	nop
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	08 95       	ret

00000a66 <Task_Heat>:


// read current temperature from ADC0, compare with target temperature,
// then turn on/off PWM to warm up/cool down, and update the status (for the LEDs)
void Task_Heat(void) {
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
	ADC_read(0, &currentTemperature);
 a6e:	63 e3       	ldi	r22, 0x33	; 51
 a70:	71 e0       	ldi	r23, 0x01	; 1
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
	if (abs(targetTemperature - currentTemperature) < 512) {
 a78:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <targetTemperature>
 a7c:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <targetTemperature+0x1>
 a80:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <currentTemperature>
 a84:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <currentTemperature+0x1>
 a88:	a9 01       	movw	r20, r18
 a8a:	48 1b       	sub	r20, r24
 a8c:	59 0b       	sbc	r21, r25
 a8e:	ca 01       	movw	r24, r20
 a90:	81 15       	cp	r24, r1
 a92:	92 40       	sbci	r25, 0x02	; 2
 a94:	58 f5       	brcc	.+86     	; 0xaec <Task_Heat+0x86>
		if (abs(targetTemperature - currentTemperature) < 128) {
 a96:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <targetTemperature>
 a9a:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <targetTemperature+0x1>
 a9e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <currentTemperature>
 aa2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <currentTemperature+0x1>
 aa6:	a9 01       	movw	r20, r18
 aa8:	48 1b       	sub	r20, r24
 aaa:	59 0b       	sbc	r21, r25
 aac:	ca 01       	movw	r24, r20
 aae:	80 38       	cpi	r24, 0x80	; 128
 ab0:	91 05       	cpc	r25, r1
 ab2:	18 f4       	brcc	.+6      	; 0xaba <Task_Heat+0x54>
			// OK
			state_heating = 0;
 ab4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <state_heating>
 ab8:	12 c0       	rjmp	.+36     	; 0xade <Task_Heat+0x78>
		} else if(currentTemperature > targetTemperature) {
 aba:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <currentTemperature>
 abe:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <currentTemperature+0x1>
 ac2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <targetTemperature>
 ac6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <targetTemperature+0x1>
 aca:	82 17       	cp	r24, r18
 acc:	93 07       	cpc	r25, r19
 ace:	20 f4       	brcc	.+8      	; 0xad8 <Task_Heat+0x72>
			// COOL DOWN
			state_heating = 2;
 ad0:	82 e0       	ldi	r24, 0x02	; 2
 ad2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state_heating>
 ad6:	03 c0       	rjmp	.+6      	; 0xade <Task_Heat+0x78>
		} else {
			// WARM UP
			state_heating = 1;
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state_heating>
		}
		PWM_setDutyCycle(targetTemperature);
 ade:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <targetTemperature>
 ae2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <targetTemperature+0x1>
 ae6:	0e 94 45 02 	call	0x48a	; 0x48a <PWM_setDutyCycle>
		// WARM UP
		PWM_setDutyCycle(100);
		//PWM_start();
		state_heating = 1;
	}
}
 aea:	17 c0       	rjmp	.+46     	; 0xb1a <Task_Heat+0xb4>
			// WARM UP
			state_heating = 1;
		}
		PWM_setDutyCycle(targetTemperature);
		
	} else if(currentTemperature > targetTemperature) {
 aec:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <currentTemperature>
 af0:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <currentTemperature+0x1>
 af4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <targetTemperature>
 af8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <targetTemperature+0x1>
 afc:	82 17       	cp	r24, r18
 afe:	93 07       	cpc	r25, r19
 b00:	30 f4       	brcc	.+12     	; 0xb0e <Task_Heat+0xa8>
		// COOL DOWN
		PWM_stop();
 b02:	0e 94 ac 02 	call	0x558	; 0x558 <PWM_stop>
		state_heating = 2;
 b06:	82 e0       	ldi	r24, 0x02	; 2
 b08:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state_heating>
		// WARM UP
		PWM_setDutyCycle(100);
		//PWM_start();
		state_heating = 1;
	}
}
 b0c:	06 c0       	rjmp	.+12     	; 0xb1a <Task_Heat+0xb4>
		PWM_stop();
		state_heating = 2;
		
	} else {
		// WARM UP
		PWM_setDutyCycle(100);
 b0e:	84 e6       	ldi	r24, 0x64	; 100
 b10:	0e 94 45 02 	call	0x48a	; 0x48a <PWM_setDutyCycle>
		//PWM_start();
		state_heating = 1;
 b14:	81 e0       	ldi	r24, 0x01	; 1
 b16:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <state_heating>
	}
}
 b1a:	00 00       	nop
 b1c:	df 91       	pop	r29
 b1e:	cf 91       	pop	r28
 b20:	08 95       	ret

00000b22 <Task_WriteLEDs>:


// write the state (heating up / cooling down / temperature ok) on the LEDs
void Task_WriteLEDs(void) {
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
 b26:	cd b7       	in	r28, 0x3d	; 61
 b28:	de b7       	in	r29, 0x3e	; 62
	switch (state_heating) {
 b2a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <state_heating>
 b2e:	88 2f       	mov	r24, r24
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	81 30       	cpi	r24, 0x01	; 1
 b34:	91 05       	cpc	r25, r1
 b36:	69 f0       	breq	.+26     	; 0xb52 <Task_WriteLEDs+0x30>
 b38:	82 30       	cpi	r24, 0x02	; 2
 b3a:	91 05       	cpc	r25, r1
 b3c:	89 f0       	breq	.+34     	; 0xb60 <Task_WriteLEDs+0x3e>
 b3e:	89 2b       	or	r24, r25
 b40:	09 f0       	breq	.+2      	; 0xb44 <Task_WriteLEDs+0x22>
			LEDs_turnOff(LED_ALL & ~LED_BLUE);
			LEDs_turnOn(LED_BLUE);
			break;
		default:
			// should never happen
			return;
 b42:	15 c0       	rjmp	.+42     	; 0xb6e <Task_WriteLEDs+0x4c>
// write the state (heating up / cooling down / temperature ok) on the LEDs
void Task_WriteLEDs(void) {
	switch (state_heating) {
		case 0:
			// temperature ok - green led
			LEDs_turnOff(LED_ALL & ~LED_GREEN);
 b44:	88 e2       	ldi	r24, 0x28	; 40
 b46:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>
			LEDs_turnOn(LED_GREEN);
 b4a:	80 e1       	ldi	r24, 0x10	; 16
 b4c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDs_turnOn>
			break;
 b50:	0e c0       	rjmp	.+28     	; 0xb6e <Task_WriteLEDs+0x4c>
		case 1:
			// heating up - red led
			LEDs_turnOff(LED_ALL & ~LED_RED);
 b52:	80 e3       	ldi	r24, 0x30	; 48
 b54:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>
			LEDs_turnOn(LED_RED);
 b58:	88 e0       	ldi	r24, 0x08	; 8
 b5a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDs_turnOn>
			break;
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <Task_WriteLEDs+0x4c>
		case 2:
			// cooling down - blue led
			LEDs_turnOff(LED_ALL & ~LED_BLUE);
 b60:	88 e1       	ldi	r24, 0x18	; 24
 b62:	0e 94 06 01 	call	0x20c	; 0x20c <LEDs_turnOff>
			LEDs_turnOn(LED_BLUE);
 b66:	80 e2       	ldi	r24, 0x20	; 32
 b68:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDs_turnOn>
			break;
 b6c:	00 00       	nop
		default:
			// should never happen
			return;
	}
}
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	08 95       	ret

00000b74 <USART_init>:

#include "USART.h"

uint8_t data;

void USART_init(void) {
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29
 b78:	cd b7       	in	r28, 0x3d	; 61
 b7a:	de b7       	in	r29, 0x3e	; 62
	// setting baud rate
	UBRR0 = UBRRVALUE;
 b7c:	84 ec       	ldi	r24, 0xC4	; 196
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	27 e6       	ldi	r18, 0x67	; 103
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	fc 01       	movw	r30, r24
 b86:	31 83       	std	Z+1, r19	; 0x01
 b88:	20 83       	st	Z, r18
	// enabling receiver and RxComplete interrupt
	UCSR0B |= (1 << RXEN0 | 1 << RXCIE0 | 1 << TXEN0);
 b8a:	81 ec       	ldi	r24, 0xC1	; 193
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	21 ec       	ldi	r18, 0xC1	; 193
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	f9 01       	movw	r30, r18
 b94:	20 81       	ld	r18, Z
 b96:	28 69       	ori	r18, 0x98	; 152
 b98:	fc 01       	movw	r30, r24
 b9a:	20 83       	st	Z, r18
	// default values for UCSR0C are already good
	// enable global interrupts
	sei();	// should be already enabled!
 b9c:	78 94       	sei
}
 b9e:	00 00       	nop
 ba0:	df 91       	pop	r29
 ba2:	cf 91       	pop	r28
 ba4:	08 95       	ret

00000ba6 <USART_read>:

uint8_t USART_read(void) {
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
	// only when the program asks for the data from the terminal,
	//  the data is provided (instead of every time the terminal receives
	//  a new message)
	return data;
 bae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <data>
}
 bb2:	df 91       	pop	r29
 bb4:	cf 91       	pop	r28
 bb6:	08 95       	ret

00000bb8 <USART_send>:

void USART_send(uint8_t ch) {
 bb8:	cf 93       	push	r28
 bba:	df 93       	push	r29
 bbc:	1f 92       	push	r1
 bbe:	cd b7       	in	r28, 0x3d	; 61
 bc0:	de b7       	in	r29, 0x3e	; 62
 bc2:	89 83       	std	Y+1, r24	; 0x01
	// wait for the data register to be ready to receive new data
	while ((UCSR0A & (1 << UDRE0)) == 0);
 bc4:	00 00       	nop
 bc6:	80 ec       	ldi	r24, 0xC0	; 192
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	fc 01       	movw	r30, r24
 bcc:	80 81       	ld	r24, Z
 bce:	88 2f       	mov	r24, r24
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	80 72       	andi	r24, 0x20	; 32
 bd4:	99 27       	eor	r25, r25
 bd6:	89 2b       	or	r24, r25
 bd8:	b1 f3       	breq	.-20     	; 0xbc6 <USART_send+0xe>
	// write the char in the register
	UDR0 = ch;
 bda:	86 ec       	ldi	r24, 0xC6	; 198
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	29 81       	ldd	r18, Y+1	; 0x01
 be0:	fc 01       	movw	r30, r24
 be2:	20 83       	st	Z, r18
}
 be4:	00 00       	nop
 be6:	0f 90       	pop	r0
 be8:	df 91       	pop	r29
 bea:	cf 91       	pop	r28
 bec:	08 95       	ret

00000bee <__vector_18>:


// handle the interrupt
ISR(USART_RX_vect) {
 bee:	1f 92       	push	r1
 bf0:	0f 92       	push	r0
 bf2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 bf6:	0f 92       	push	r0
 bf8:	11 24       	eor	r1, r1
 bfa:	2f 93       	push	r18
 bfc:	3f 93       	push	r19
 bfe:	4f 93       	push	r20
 c00:	5f 93       	push	r21
 c02:	6f 93       	push	r22
 c04:	7f 93       	push	r23
 c06:	8f 93       	push	r24
 c08:	9f 93       	push	r25
 c0a:	af 93       	push	r26
 c0c:	bf 93       	push	r27
 c0e:	ef 93       	push	r30
 c10:	ff 93       	push	r31
 c12:	cf 93       	push	r28
 c14:	df 93       	push	r29
 c16:	1f 92       	push	r1
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
	// the data sent by the terminal is stored in the variable.
	static uint16_t dataBuffer;
	uint8_t rx = UDR0;
 c1c:	86 ec       	ldi	r24, 0xC6	; 198
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	fc 01       	movw	r30, r24
 c22:	80 81       	ld	r24, Z
 c24:	89 83       	std	Y+1, r24	; 0x01
	
	if (rx >= '0' && rx <= '9') {
 c26:	89 81       	ldd	r24, Y+1	; 0x01
 c28:	80 33       	cpi	r24, 0x30	; 48
 c2a:	d8 f0       	brcs	.+54     	; 0xc62 <__vector_18+0x74>
 c2c:	89 81       	ldd	r24, Y+1	; 0x01
 c2e:	8a 33       	cpi	r24, 0x3A	; 58
 c30:	c0 f4       	brcc	.+48     	; 0xc62 <__vector_18+0x74>
		// digit
		
		// ASCII digit to number conversion can be obtained
		//  subtracting the ASCII code for '0'
		dataBuffer = 10 * dataBuffer + (rx - '0');
 c32:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dataBuffer.1625>
 c36:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dataBuffer.1625+0x1>
 c3a:	88 0f       	add	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	9c 01       	movw	r18, r24
 c40:	22 0f       	add	r18, r18
 c42:	33 1f       	adc	r19, r19
 c44:	22 0f       	add	r18, r18
 c46:	33 1f       	adc	r19, r19
 c48:	28 0f       	add	r18, r24
 c4a:	39 1f       	adc	r19, r25
 c4c:	89 81       	ldd	r24, Y+1	; 0x01
 c4e:	88 2f       	mov	r24, r24
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	82 0f       	add	r24, r18
 c54:	93 1f       	adc	r25, r19
 c56:	c0 97       	sbiw	r24, 0x30	; 48
 c58:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dataBuffer.1625+0x1>
 c5c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dataBuffer.1625>
 c60:	37 c0       	rjmp	.+110    	; 0xcd0 <__vector_18+0xe2>
	} else if (rx == '\r' && dataBuffer <= 100) {
 c62:	89 81       	ldd	r24, Y+1	; 0x01
 c64:	8d 30       	cpi	r24, 0x0D	; 13
 c66:	d9 f4       	brne	.+54     	; 0xc9e <__vector_18+0xb0>
 c68:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dataBuffer.1625>
 c6c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dataBuffer.1625+0x1>
 c70:	85 36       	cpi	r24, 0x65	; 101
 c72:	91 05       	cpc	r25, r1
 c74:	a0 f4       	brcc	.+40     	; 0xc9e <__vector_18+0xb0>
		// user pressed enter and the inputted number is less than 100%
		
		// move the data from the dataBuffer
		data = dataBuffer;
 c76:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dataBuffer.1625>
 c7a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dataBuffer.1625+0x1>
 c7e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <data>
		// clean the static buffer for future use
		dataBuffer = 0;
 c82:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dataBuffer.1625+0x1>
 c86:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dataBuffer.1625>
		// send confirmation message
		USART_send('o');
 c8a:	8f e6       	ldi	r24, 0x6F	; 111
 c8c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('k');
 c90:	8b e6       	ldi	r24, 0x6B	; 107
 c92:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('\r');
 c96:	8d e0       	ldi	r24, 0x0D	; 13
 c98:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
 c9c:	19 c0       	rjmp	.+50     	; 0xcd0 <__vector_18+0xe2>
	} else {
		// something is off
		
		// send error message
		USART_send(' ');
 c9e:	80 e2       	ldi	r24, 0x20	; 32
 ca0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('e');
 ca4:	85 e6       	ldi	r24, 0x65	; 101
 ca6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('r');
 caa:	82 e7       	ldi	r24, 0x72	; 114
 cac:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('r');
 cb0:	82 e7       	ldi	r24, 0x72	; 114
 cb2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('o');
 cb6:	8f e6       	ldi	r24, 0x6F	; 111
 cb8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('r');
 cbc:	82 e7       	ldi	r24, 0x72	; 114
 cbe:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		USART_send('\r');
 cc2:	8d e0       	ldi	r24, 0x0D	; 13
 cc4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <USART_send>
		// clean the buffer
		dataBuffer = 0;
 cc8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dataBuffer.1625+0x1>
 ccc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dataBuffer.1625>
	}
 cd0:	00 00       	nop
 cd2:	0f 90       	pop	r0
 cd4:	df 91       	pop	r29
 cd6:	cf 91       	pop	r28
 cd8:	ff 91       	pop	r31
 cda:	ef 91       	pop	r30
 cdc:	bf 91       	pop	r27
 cde:	af 91       	pop	r26
 ce0:	9f 91       	pop	r25
 ce2:	8f 91       	pop	r24
 ce4:	7f 91       	pop	r23
 ce6:	6f 91       	pop	r22
 ce8:	5f 91       	pop	r21
 cea:	4f 91       	pop	r20
 cec:	3f 91       	pop	r19
 cee:	2f 91       	pop	r18
 cf0:	0f 90       	pop	r0
 cf2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 cf6:	0f 90       	pop	r0
 cf8:	1f 90       	pop	r1
 cfa:	18 95       	reti

00000cfc <__fixunssfsi>:
 cfc:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_splitA>
 d00:	88 f0       	brcs	.+34     	; 0xd24 <__fixunssfsi+0x28>
 d02:	9f 57       	subi	r25, 0x7F	; 127
 d04:	98 f0       	brcs	.+38     	; 0xd2c <__fixunssfsi+0x30>
 d06:	b9 2f       	mov	r27, r25
 d08:	99 27       	eor	r25, r25
 d0a:	b7 51       	subi	r27, 0x17	; 23
 d0c:	b0 f0       	brcs	.+44     	; 0xd3a <__fixunssfsi+0x3e>
 d0e:	e1 f0       	breq	.+56     	; 0xd48 <__fixunssfsi+0x4c>
 d10:	66 0f       	add	r22, r22
 d12:	77 1f       	adc	r23, r23
 d14:	88 1f       	adc	r24, r24
 d16:	99 1f       	adc	r25, r25
 d18:	1a f0       	brmi	.+6      	; 0xd20 <__fixunssfsi+0x24>
 d1a:	ba 95       	dec	r27
 d1c:	c9 f7       	brne	.-14     	; 0xd10 <__fixunssfsi+0x14>
 d1e:	14 c0       	rjmp	.+40     	; 0xd48 <__fixunssfsi+0x4c>
 d20:	b1 30       	cpi	r27, 0x01	; 1
 d22:	91 f0       	breq	.+36     	; 0xd48 <__fixunssfsi+0x4c>
 d24:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fp_zero>
 d28:	b1 e0       	ldi	r27, 0x01	; 1
 d2a:	08 95       	ret
 d2c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__fp_zero>
 d30:	67 2f       	mov	r22, r23
 d32:	78 2f       	mov	r23, r24
 d34:	88 27       	eor	r24, r24
 d36:	b8 5f       	subi	r27, 0xF8	; 248
 d38:	39 f0       	breq	.+14     	; 0xd48 <__fixunssfsi+0x4c>
 d3a:	b9 3f       	cpi	r27, 0xF9	; 249
 d3c:	cc f3       	brlt	.-14     	; 0xd30 <__fixunssfsi+0x34>
 d3e:	86 95       	lsr	r24
 d40:	77 95       	ror	r23
 d42:	67 95       	ror	r22
 d44:	b3 95       	inc	r27
 d46:	d9 f7       	brne	.-10     	; 0xd3e <__fixunssfsi+0x42>
 d48:	3e f4       	brtc	.+14     	; 0xd58 <__fixunssfsi+0x5c>
 d4a:	90 95       	com	r25
 d4c:	80 95       	com	r24
 d4e:	70 95       	com	r23
 d50:	61 95       	neg	r22
 d52:	7f 4f       	sbci	r23, 0xFF	; 255
 d54:	8f 4f       	sbci	r24, 0xFF	; 255
 d56:	9f 4f       	sbci	r25, 0xFF	; 255
 d58:	08 95       	ret

00000d5a <__floatunsisf>:
 d5a:	e8 94       	clt
 d5c:	09 c0       	rjmp	.+18     	; 0xd70 <__floatsisf+0x12>

00000d5e <__floatsisf>:
 d5e:	97 fb       	bst	r25, 7
 d60:	3e f4       	brtc	.+14     	; 0xd70 <__floatsisf+0x12>
 d62:	90 95       	com	r25
 d64:	80 95       	com	r24
 d66:	70 95       	com	r23
 d68:	61 95       	neg	r22
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255
 d6c:	8f 4f       	sbci	r24, 0xFF	; 255
 d6e:	9f 4f       	sbci	r25, 0xFF	; 255
 d70:	99 23       	and	r25, r25
 d72:	a9 f0       	breq	.+42     	; 0xd9e <__floatsisf+0x40>
 d74:	f9 2f       	mov	r31, r25
 d76:	96 e9       	ldi	r25, 0x96	; 150
 d78:	bb 27       	eor	r27, r27
 d7a:	93 95       	inc	r25
 d7c:	f6 95       	lsr	r31
 d7e:	87 95       	ror	r24
 d80:	77 95       	ror	r23
 d82:	67 95       	ror	r22
 d84:	b7 95       	ror	r27
 d86:	f1 11       	cpse	r31, r1
 d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__floatsisf+0x1c>
 d8a:	fa f4       	brpl	.+62     	; 0xdca <__floatsisf+0x6c>
 d8c:	bb 0f       	add	r27, r27
 d8e:	11 f4       	brne	.+4      	; 0xd94 <__floatsisf+0x36>
 d90:	60 ff       	sbrs	r22, 0
 d92:	1b c0       	rjmp	.+54     	; 0xdca <__floatsisf+0x6c>
 d94:	6f 5f       	subi	r22, 0xFF	; 255
 d96:	7f 4f       	sbci	r23, 0xFF	; 255
 d98:	8f 4f       	sbci	r24, 0xFF	; 255
 d9a:	9f 4f       	sbci	r25, 0xFF	; 255
 d9c:	16 c0       	rjmp	.+44     	; 0xdca <__floatsisf+0x6c>
 d9e:	88 23       	and	r24, r24
 da0:	11 f0       	breq	.+4      	; 0xda6 <__floatsisf+0x48>
 da2:	96 e9       	ldi	r25, 0x96	; 150
 da4:	11 c0       	rjmp	.+34     	; 0xdc8 <__floatsisf+0x6a>
 da6:	77 23       	and	r23, r23
 da8:	21 f0       	breq	.+8      	; 0xdb2 <__floatsisf+0x54>
 daa:	9e e8       	ldi	r25, 0x8E	; 142
 dac:	87 2f       	mov	r24, r23
 dae:	76 2f       	mov	r23, r22
 db0:	05 c0       	rjmp	.+10     	; 0xdbc <__floatsisf+0x5e>
 db2:	66 23       	and	r22, r22
 db4:	71 f0       	breq	.+28     	; 0xdd2 <__floatsisf+0x74>
 db6:	96 e8       	ldi	r25, 0x86	; 134
 db8:	86 2f       	mov	r24, r22
 dba:	70 e0       	ldi	r23, 0x00	; 0
 dbc:	60 e0       	ldi	r22, 0x00	; 0
 dbe:	2a f0       	brmi	.+10     	; 0xdca <__floatsisf+0x6c>
 dc0:	9a 95       	dec	r25
 dc2:	66 0f       	add	r22, r22
 dc4:	77 1f       	adc	r23, r23
 dc6:	88 1f       	adc	r24, r24
 dc8:	da f7       	brpl	.-10     	; 0xdc0 <__floatsisf+0x62>
 dca:	88 0f       	add	r24, r24
 dcc:	96 95       	lsr	r25
 dce:	87 95       	ror	r24
 dd0:	97 f9       	bld	r25, 7
 dd2:	08 95       	ret

00000dd4 <__fp_split3>:
 dd4:	57 fd       	sbrc	r21, 7
 dd6:	90 58       	subi	r25, 0x80	; 128
 dd8:	44 0f       	add	r20, r20
 dda:	55 1f       	adc	r21, r21
 ddc:	59 f0       	breq	.+22     	; 0xdf4 <__fp_splitA+0x10>
 dde:	5f 3f       	cpi	r21, 0xFF	; 255
 de0:	71 f0       	breq	.+28     	; 0xdfe <__fp_splitA+0x1a>
 de2:	47 95       	ror	r20

00000de4 <__fp_splitA>:
 de4:	88 0f       	add	r24, r24
 de6:	97 fb       	bst	r25, 7
 de8:	99 1f       	adc	r25, r25
 dea:	61 f0       	breq	.+24     	; 0xe04 <__fp_splitA+0x20>
 dec:	9f 3f       	cpi	r25, 0xFF	; 255
 dee:	79 f0       	breq	.+30     	; 0xe0e <__fp_splitA+0x2a>
 df0:	87 95       	ror	r24
 df2:	08 95       	ret
 df4:	12 16       	cp	r1, r18
 df6:	13 06       	cpc	r1, r19
 df8:	14 06       	cpc	r1, r20
 dfa:	55 1f       	adc	r21, r21
 dfc:	f2 cf       	rjmp	.-28     	; 0xde2 <__fp_split3+0xe>
 dfe:	46 95       	lsr	r20
 e00:	f1 df       	rcall	.-30     	; 0xde4 <__fp_splitA>
 e02:	08 c0       	rjmp	.+16     	; 0xe14 <__fp_splitA+0x30>
 e04:	16 16       	cp	r1, r22
 e06:	17 06       	cpc	r1, r23
 e08:	18 06       	cpc	r1, r24
 e0a:	99 1f       	adc	r25, r25
 e0c:	f1 cf       	rjmp	.-30     	; 0xdf0 <__fp_splitA+0xc>
 e0e:	86 95       	lsr	r24
 e10:	71 05       	cpc	r23, r1
 e12:	61 05       	cpc	r22, r1
 e14:	08 94       	sec
 e16:	08 95       	ret

00000e18 <__fp_zero>:
 e18:	e8 94       	clt

00000e1a <__fp_szero>:
 e1a:	bb 27       	eor	r27, r27
 e1c:	66 27       	eor	r22, r22
 e1e:	77 27       	eor	r23, r23
 e20:	cb 01       	movw	r24, r22
 e22:	97 f9       	bld	r25, 7
 e24:	08 95       	ret

00000e26 <__mulsf3>:
 e26:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3x>
 e2a:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_round>
 e2e:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscA>
 e32:	38 f0       	brcs	.+14     	; 0xe42 <__mulsf3+0x1c>
 e34:	0e 94 90 07 	call	0xf20	; 0xf20 <__fp_pscB>
 e38:	20 f0       	brcs	.+8      	; 0xe42 <__mulsf3+0x1c>
 e3a:	95 23       	and	r25, r21
 e3c:	11 f0       	breq	.+4      	; 0xe42 <__mulsf3+0x1c>
 e3e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_inf>
 e42:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_nan>
 e46:	11 24       	eor	r1, r1
 e48:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_szero>

00000e4c <__mulsf3x>:
 e4c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_split3>
 e50:	70 f3       	brcs	.-36     	; 0xe2e <__mulsf3+0x8>

00000e52 <__mulsf3_pse>:
 e52:	95 9f       	mul	r25, r21
 e54:	c1 f3       	breq	.-16     	; 0xe46 <__mulsf3+0x20>
 e56:	95 0f       	add	r25, r21
 e58:	50 e0       	ldi	r21, 0x00	; 0
 e5a:	55 1f       	adc	r21, r21
 e5c:	62 9f       	mul	r22, r18
 e5e:	f0 01       	movw	r30, r0
 e60:	72 9f       	mul	r23, r18
 e62:	bb 27       	eor	r27, r27
 e64:	f0 0d       	add	r31, r0
 e66:	b1 1d       	adc	r27, r1
 e68:	63 9f       	mul	r22, r19
 e6a:	aa 27       	eor	r26, r26
 e6c:	f0 0d       	add	r31, r0
 e6e:	b1 1d       	adc	r27, r1
 e70:	aa 1f       	adc	r26, r26
 e72:	64 9f       	mul	r22, r20
 e74:	66 27       	eor	r22, r22
 e76:	b0 0d       	add	r27, r0
 e78:	a1 1d       	adc	r26, r1
 e7a:	66 1f       	adc	r22, r22
 e7c:	82 9f       	mul	r24, r18
 e7e:	22 27       	eor	r18, r18
 e80:	b0 0d       	add	r27, r0
 e82:	a1 1d       	adc	r26, r1
 e84:	62 1f       	adc	r22, r18
 e86:	73 9f       	mul	r23, r19
 e88:	b0 0d       	add	r27, r0
 e8a:	a1 1d       	adc	r26, r1
 e8c:	62 1f       	adc	r22, r18
 e8e:	83 9f       	mul	r24, r19
 e90:	a0 0d       	add	r26, r0
 e92:	61 1d       	adc	r22, r1
 e94:	22 1f       	adc	r18, r18
 e96:	74 9f       	mul	r23, r20
 e98:	33 27       	eor	r19, r19
 e9a:	a0 0d       	add	r26, r0
 e9c:	61 1d       	adc	r22, r1
 e9e:	23 1f       	adc	r18, r19
 ea0:	84 9f       	mul	r24, r20
 ea2:	60 0d       	add	r22, r0
 ea4:	21 1d       	adc	r18, r1
 ea6:	82 2f       	mov	r24, r18
 ea8:	76 2f       	mov	r23, r22
 eaa:	6a 2f       	mov	r22, r26
 eac:	11 24       	eor	r1, r1
 eae:	9f 57       	subi	r25, 0x7F	; 127
 eb0:	50 40       	sbci	r21, 0x00	; 0
 eb2:	9a f0       	brmi	.+38     	; 0xeda <__mulsf3_pse+0x88>
 eb4:	f1 f0       	breq	.+60     	; 0xef2 <__mulsf3_pse+0xa0>
 eb6:	88 23       	and	r24, r24
 eb8:	4a f0       	brmi	.+18     	; 0xecc <__mulsf3_pse+0x7a>
 eba:	ee 0f       	add	r30, r30
 ebc:	ff 1f       	adc	r31, r31
 ebe:	bb 1f       	adc	r27, r27
 ec0:	66 1f       	adc	r22, r22
 ec2:	77 1f       	adc	r23, r23
 ec4:	88 1f       	adc	r24, r24
 ec6:	91 50       	subi	r25, 0x01	; 1
 ec8:	50 40       	sbci	r21, 0x00	; 0
 eca:	a9 f7       	brne	.-22     	; 0xeb6 <__mulsf3_pse+0x64>
 ecc:	9e 3f       	cpi	r25, 0xFE	; 254
 ece:	51 05       	cpc	r21, r1
 ed0:	80 f0       	brcs	.+32     	; 0xef2 <__mulsf3_pse+0xa0>
 ed2:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_inf>
 ed6:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_szero>
 eda:	5f 3f       	cpi	r21, 0xFF	; 255
 edc:	e4 f3       	brlt	.-8      	; 0xed6 <__mulsf3_pse+0x84>
 ede:	98 3e       	cpi	r25, 0xE8	; 232
 ee0:	d4 f3       	brlt	.-12     	; 0xed6 <__mulsf3_pse+0x84>
 ee2:	86 95       	lsr	r24
 ee4:	77 95       	ror	r23
 ee6:	67 95       	ror	r22
 ee8:	b7 95       	ror	r27
 eea:	f7 95       	ror	r31
 eec:	e7 95       	ror	r30
 eee:	9f 5f       	subi	r25, 0xFF	; 255
 ef0:	c1 f7       	brne	.-16     	; 0xee2 <__mulsf3_pse+0x90>
 ef2:	fe 2b       	or	r31, r30
 ef4:	88 0f       	add	r24, r24
 ef6:	91 1d       	adc	r25, r1
 ef8:	96 95       	lsr	r25
 efa:	87 95       	ror	r24
 efc:	97 f9       	bld	r25, 7
 efe:	08 95       	ret

00000f00 <__fp_inf>:
 f00:	97 f9       	bld	r25, 7
 f02:	9f 67       	ori	r25, 0x7F	; 127
 f04:	80 e8       	ldi	r24, 0x80	; 128
 f06:	70 e0       	ldi	r23, 0x00	; 0
 f08:	60 e0       	ldi	r22, 0x00	; 0
 f0a:	08 95       	ret

00000f0c <__fp_nan>:
 f0c:	9f ef       	ldi	r25, 0xFF	; 255
 f0e:	80 ec       	ldi	r24, 0xC0	; 192
 f10:	08 95       	ret

00000f12 <__fp_pscA>:
 f12:	00 24       	eor	r0, r0
 f14:	0a 94       	dec	r0
 f16:	16 16       	cp	r1, r22
 f18:	17 06       	cpc	r1, r23
 f1a:	18 06       	cpc	r1, r24
 f1c:	09 06       	cpc	r0, r25
 f1e:	08 95       	ret

00000f20 <__fp_pscB>:
 f20:	00 24       	eor	r0, r0
 f22:	0a 94       	dec	r0
 f24:	12 16       	cp	r1, r18
 f26:	13 06       	cpc	r1, r19
 f28:	14 06       	cpc	r1, r20
 f2a:	05 06       	cpc	r0, r21
 f2c:	08 95       	ret

00000f2e <__fp_round>:
 f2e:	09 2e       	mov	r0, r25
 f30:	03 94       	inc	r0
 f32:	00 0c       	add	r0, r0
 f34:	11 f4       	brne	.+4      	; 0xf3a <__fp_round+0xc>
 f36:	88 23       	and	r24, r24
 f38:	52 f0       	brmi	.+20     	; 0xf4e <__fp_round+0x20>
 f3a:	bb 0f       	add	r27, r27
 f3c:	40 f4       	brcc	.+16     	; 0xf4e <__fp_round+0x20>
 f3e:	bf 2b       	or	r27, r31
 f40:	11 f4       	brne	.+4      	; 0xf46 <__fp_round+0x18>
 f42:	60 ff       	sbrs	r22, 0
 f44:	04 c0       	rjmp	.+8      	; 0xf4e <__fp_round+0x20>
 f46:	6f 5f       	subi	r22, 0xFF	; 255
 f48:	7f 4f       	sbci	r23, 0xFF	; 255
 f4a:	8f 4f       	sbci	r24, 0xFF	; 255
 f4c:	9f 4f       	sbci	r25, 0xFF	; 255
 f4e:	08 95       	ret

00000f50 <__umulhisi3>:
 f50:	a2 9f       	mul	r26, r18
 f52:	b0 01       	movw	r22, r0
 f54:	b3 9f       	mul	r27, r19
 f56:	c0 01       	movw	r24, r0
 f58:	a3 9f       	mul	r26, r19
 f5a:	70 0d       	add	r23, r0
 f5c:	81 1d       	adc	r24, r1
 f5e:	11 24       	eor	r1, r1
 f60:	91 1d       	adc	r25, r1
 f62:	b2 9f       	mul	r27, r18
 f64:	70 0d       	add	r23, r0
 f66:	81 1d       	adc	r24, r1
 f68:	11 24       	eor	r1, r1
 f6a:	91 1d       	adc	r25, r1
 f6c:	08 95       	ret

00000f6e <_exit>:
 f6e:	f8 94       	cli

00000f70 <__stop_program>:
 f70:	ff cf       	rjmp	.-2      	; 0xf70 <__stop_program>
